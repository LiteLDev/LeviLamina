/**
 * @file  MolangDescriptor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ItemDescriptor.hpp"
#include "Json.hpp"
#include "ItemTagDescriptor.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

/**
 * @brief MC class MolangDescriptor.
 *
 */
class MolangDescriptor : public ItemTagDescriptor {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MOLANGDESCRIPTOR
public:
    class MolangDescriptor& operator=(class MolangDescriptor const &) = delete;
    MolangDescriptor(class MolangDescriptor const &) = delete;
    MolangDescriptor() = delete;
#endif

public:
    /**
     * @vftbl  0
     * @symbol ?clone@MolangDescriptor@@UEBA?AV?$unique_ptr@UBaseDescriptor@ItemDescriptor@@U?$default_delete@UBaseDescriptor@ItemDescriptor@@@std@@@std@@XZ
     * @hash   -948602645
     */
    virtual std::unique_ptr<struct ItemDescriptor::BaseDescriptor> clone() const;
    /**
     * @vftbl  1
     * @symbol ?sameItems@MolangDescriptor@@UEBA_NAEBUBaseDescriptor@ItemDescriptor@@_N@Z
     * @hash   833722107
     */
    virtual bool sameItems(struct ItemDescriptor::BaseDescriptor const &, bool) const;
    /**
     * @vftbl  2
     * @symbol ?sameItem@MolangDescriptor@@UEBA_NAEBUItemEntry@ItemDescriptor@@_N@Z
     * @hash   -957810265
     */
    virtual bool sameItem(struct ItemDescriptor::ItemEntry const &, bool) const;
    /**
     * @vftbl  3
     * @symbol ?getFullName@MolangDescriptor@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
     * @hash   -1291164407
     */
    virtual std::string const & getFullName() const;
    /**
     * @vftbl  6
     * @symbol ?toMap@MolangDescriptor@@UEBA?AV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@@2@@std@@XZ
     * @hash   945088289
     */
    virtual class std::map<std::string, std::string, struct std::less<std::string>, class std::allocator<struct std::pair<std::string const, std::string>>> toMap() const;
    /**
     * @vftbl  7
     * @symbol ?save@MolangDescriptor@@UEBA?AV?$optional@VCompoundTag@@@std@@XZ
     * @hash   1053569445
     */
    virtual class std::optional<class CompoundTag> save() const;
    /**
     * @vftbl  8
     * @symbol ?serialize@MolangDescriptor@@UEBAXAEAVValue@Json@@@Z
     * @hash   -74461134
     */
    virtual void serialize(class Json::Value &) const;
    /**
     * @vftbl  9
     * @symbol ?getType@MolangDescriptor@@UEBA?AW4InternalType@ItemDescriptor@@XZ
     * @hash   645788864
     */
    virtual enum ItemDescriptor::InternalType getType() const;
    /**
     * @vftbl  11
     * @hash   -335047836
     */
    virtual void __unk_vfn_11();

};