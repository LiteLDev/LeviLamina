/**
 * @file  FileChunkManager.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class FileChunkManager.
 *
 */
class FileChunkManager {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_FILECHUNKMANAGER
public:
    class FileChunkManager& operator=(class FileChunkManager const &) = delete;
    FileChunkManager(class FileChunkManager const &) = delete;
#endif

public:
    /**
     * @symbol ??0FileChunkManager@@QEAA@XZ
     * @hash   1967501432
     */
    MCAPI FileChunkManager();
    /**
     * @symbol ?getChunkInfo@FileChunkManager@@QEBA?AUFileChunkInfo@@H@Z
     * @hash   -507636237
     */
    MCAPI struct FileChunkInfo getChunkInfo(int) const;
    /**
     * @symbol ?getChunks@FileChunkManager@@QEBAAEBV?$vector@UFileChunkInfo@@V?$allocator@UFileChunkInfo@@@std@@@std@@XZ
     * @hash   436007324
     */
    MCAPI std::vector<struct FileChunkInfo> const & getChunks() const;
    /**
     * @symbol ?getTotalNumberOfChunks@FileChunkManager@@QEAAHXZ
     * @hash   1177939514
     */
    MCAPI int getTotalNumberOfChunks();
    /**
     * @symbol ?reset@FileChunkManager@@QEAAXXZ
     * @hash   892605923
     */
    MCAPI void reset();
    /**
     * @symbol ?reset@FileChunkManager@@QEAAX_KI@Z
     * @hash   425855052
     */
    MCAPI void reset(unsigned __int64, unsigned int);
    /**
     * @symbol ??1FileChunkManager@@QEAA@XZ
     * @hash   1111009782
     */
    MCAPI ~FileChunkManager();

//private:
    /**
     * @symbol ?_generateChunkInfo@FileChunkManager@@AEAAXXZ
     * @hash   1836833959
     */
    MCAPI void _generateChunkInfo();

private:

};