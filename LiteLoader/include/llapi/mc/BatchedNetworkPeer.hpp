/**
 * @file  BatchedNetworkPeer.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "NetworkPeer.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class BatchedNetworkPeer.
 *
 */
class BatchedNetworkPeer {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BATCHEDNETWORKPEER
public:
    class BatchedNetworkPeer& operator=(class BatchedNetworkPeer const &) = delete;
    BatchedNetworkPeer(class BatchedNetworkPeer const &) = delete;
    BatchedNetworkPeer() = delete;
#endif

public:
    /**
     * @vftbl  0
     * @hash   1497722337
     */
    virtual ~BatchedNetworkPeer();
    /**
     * @vftbl  1
     * @symbol ?sendPacket@BatchedNetworkPeer@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Reliability@NetworkPeer@@HGW4Compressibility@@@Z
     * @hash   -1231079258
     */
    virtual void sendPacket(std::string const &, enum NetworkPeer::Reliability, int, unsigned short, enum Compressibility);
    /**
     * @vftbl  2
     * @symbol ?receivePacket@BatchedNetworkPeer@@UEAA?AW4DataStatus@NetworkPeer@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBV?$shared_ptr@V?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@chrono@std@@@5@@Z
     * @hash   4465872
     */
    virtual enum NetworkPeer::DataStatus receivePacket(std::string &, class std::shared_ptr<class std::chrono::time_point<struct std::chrono::steady_clock, class std::chrono::duration<__int64, struct std::ratio<1, 1000000000>>>> const &);
    /**
     * @vftbl  3
     * @symbol ?getNetworkStatus@BatchedNetworkPeer@@UEBA?AUNetworkStatus@NetworkPeer@@XZ
     * @hash   -385579465
     */
    virtual struct NetworkPeer::NetworkStatus getNetworkStatus() const;
    /**
     * @vftbl  4
     * @symbol ?update@BatchedNetworkPeer@@UEAAXXZ
     * @hash   -1863956199
     */
    virtual void update();
    /**
     * @vftbl  5
     * @symbol ?flush@BatchedNetworkPeer@@UEAAX$$QEAV?$function@$$A6AXXZ@std@@@Z
     * @hash   345985540
     */
    virtual void flush(class std::function<void (void)> &&);
    /**
     * @symbol ??0BatchedNetworkPeer@@QEAA@V?$shared_ptr@VNetworkPeer@@@std@@AEAVScheduler@@@Z
     * @hash   2101268330
     */
    MCAPI BatchedNetworkPeer(class std::shared_ptr<class NetworkPeer>, class Scheduler &);
    /**
     * @symbol ?setAsyncEnabled@BatchedNetworkPeer@@QEAAX_N@Z
     * @hash   -2115667124
     */
    MCAPI void setAsyncEnabled(bool);

//private:
    /**
     * @symbol ?_startSendTask@BatchedNetworkPeer@@AEAAXXZ
     * @hash   -1929715419
     */
    MCAPI void _startSendTask();

private:

};