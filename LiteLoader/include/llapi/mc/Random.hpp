/**
 * @file  Random.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class Random.
 *
 */
class Random {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_RANDOM
public:
    class Random& operator=(class Random const &) = delete;
    Random(class Random const &) = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_RANDOM
    /**
     * @symbol ?consumeCount@Random@@UEAAXI@Z
     * @hash   1699439715
     */
    MCVAPI void consumeCount(unsigned int);
    /**
     * @symbol ?fork@Random@@UEAA?AV?$unique_ptr@VIRandom@@U?$default_delete@VIRandom@@@std@@@std@@XZ
     * @hash   -622879345
     */
    MCVAPI std::unique_ptr<class IRandom> fork();
    /**
     * @symbol ?nextBoolean@Random@@UEAA_NXZ
     * @hash   616836955
     */
    MCVAPI bool nextBoolean();
    /**
     * @symbol ?nextDouble@Random@@UEAANXZ
     * @hash   958130427
     */
    MCVAPI double nextDouble();
    /**
     * @symbol ?nextFloat@Random@@UEAAMXZ
     * @hash   -10037979
     */
    MCVAPI float nextFloat();
    /**
     * @symbol ?nextGaussianDouble@Random@@UEAANXZ
     * @hash   -454000026
     */
    MCVAPI double nextGaussianDouble();
    /**
     * @symbol ?nextInt@Random@@UEAAHH@Z
     * @hash   -139992246
     */
    MCVAPI int nextInt(int);
    /**
     * @symbol ?nextInt@Random@@UEAAHXZ
     * @hash   1872050229
     */
    MCVAPI int nextInt();
    /**
     * @symbol ?nextLong@Random@@UEAA_JXZ
     * @hash   -533579886
     */
    MCVAPI __int64 nextLong();
    /**
     * @symbol ??1Random@@UEAA@XZ
     * @hash   1675746004
     */
    MCVAPI ~Random();
#endif
    /**
     * @symbol ??0Random@@QEAA@XZ
     * @hash   -150827425
     */
    MCAPI Random();
    /**
     * @symbol ??0Random@@QEAA@I_N@Z
     * @hash   -1950045557
     */
    MCAPI Random(unsigned int, bool);
    /**
     * @symbol ?nextFloat@Random@@QEAAMMM@Z
     * @hash   -1627617602
     */
    MCAPI float nextFloat(float, float);
    /**
     * @symbol ?nextGaussianFloat@Random@@QEAAMXZ
     * @hash   -1647710586
     */
    MCAPI float nextGaussianFloat();
    /**
     * @symbol ?nextGaussianInt@Random@@QEAAHH@Z
     * @hash   392765347
     */
    MCAPI int nextGaussianInt(int);
    /**
     * @symbol ?nextInt@Random@@QEAAHHH@Z
     * @hash   -513336784
     */
    MCAPI int nextInt(int, int);
    /**
     * @symbol ?nextIntInclusive@Random@@QEAAHHH@Z
     * @hash   -1471168462
     */
    MCAPI int nextIntInclusive(int, int);
    /**
     * @symbol ?getThreadLocal@Random@@SAAEAV1@XZ
     * @hash   1721182164
     */
    MCAPI static class Random & getThreadLocal();

//private:

private:
    /**
     * @symbol ?mThreadLocalRandom@Random@@0V?$ThreadLocalObject@VRandom@@V?$allocator@VRandom@@@std@@@Threading@Bedrock@@A
     * @hash   -173122467
     */
    MCAPI static class Bedrock::Threading::ThreadLocalObject<class Random, class std::allocator<class Random>> mThreadLocalRandom;

};