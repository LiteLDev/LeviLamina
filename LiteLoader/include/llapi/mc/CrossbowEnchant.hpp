/**
 * @file  CrossbowEnchant.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Enchant.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class CrossbowEnchant.
 *
 */
class CrossbowEnchant {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CROSSBOWENCHANT
public:
    class CrossbowEnchant& operator=(class CrossbowEnchant const &) = delete;
    CrossbowEnchant(class CrossbowEnchant const &) = delete;
    CrossbowEnchant() = delete;
#endif

public:
    /**
     * @vftbl  0
     * @hash   -1978734531
     */
    virtual ~CrossbowEnchant();
    /**
     * @vftbl  1
     * @symbol ?isCompatibleWith@CrossbowEnchant@@UEBA_NW4Type@Enchant@@@Z
     * @hash   -519900688
     */
    virtual bool isCompatibleWith(enum class Enchant::Type) const;
    /**
     * @vftbl  2
     * @symbol ?getMinCost@CrossbowEnchant@@UEBAHH@Z
     * @hash   661764232
     */
    virtual int getMinCost(int) const;
    /**
     * @vftbl  3
     * @symbol ?getMaxCost@CrossbowEnchant@@UEBAHH@Z
     * @hash   -35431546
     */
    virtual int getMaxCost(int) const;
    /**
     * @vftbl  4
     * @hash   -1049815132
     */
    virtual void __unk_vfn_4();
    /**
     * @vftbl  5
     * @symbol ?getMaxLevel@CrossbowEnchant@@UEBAHXZ
     * @hash   -300260158
     */
    virtual int getMaxLevel() const;
    /**
     * @vftbl  6
     * @hash   -1261679114
     */
    virtual void __unk_vfn_6();
    /**
     * @vftbl  7
     * @hash   -1253298233
     */
    virtual void __unk_vfn_7();
    /**
     * @vftbl  8
     * @hash   -1252374712
     */
    virtual void __unk_vfn_8();
    /**
     * @vftbl  9
     * @hash   -1251451191
     */
    virtual void __unk_vfn_9();
    /**
     * @vftbl  10
     * @hash   -293103069
     */
    virtual void __unk_vfn_10();
    /**
     * @vftbl  11
     * @hash   -292179548
     */
    virtual void __unk_vfn_11();
    /**
     * @vftbl  12
     * @hash   1112972549
     */
    virtual void __unk_vfn_12();
    /**
     * @vftbl  13
     * @hash   -249878250
     */
    virtual void __unk_vfn_13();
    /**
     * @vftbl  14
     * @symbol ?_isValidEnchantmentTypeForCategory@CrossbowEnchant@@EEBA_NW4Type@Enchant@@@Z
     * @hash   1944093497
     */
    virtual bool _isValidEnchantmentTypeForCategory(enum class Enchant::Type) const;
    /**
     * @symbol ??0CrossbowEnchant@@QEAA@W4Type@Enchant@@W4Frequency@2@V?$basic_string_span@$$CBD$0?0@gsl@@2H_NH@Z
     * @hash   -2007265317
     */
    MCAPI CrossbowEnchant(enum class Enchant::Type, enum class Enchant::Frequency, class gsl::basic_string_span<char const, -1>, class gsl::basic_string_span<char const, -1>, int, bool, int);

//private:

private:
    /**
     * @symbol ?VALID_ENCHANTMENTS@CrossbowEnchant@@0V?$vector@W4Type@Enchant@@V?$allocator@W4Type@Enchant@@@std@@@std@@B
     * @hash   970163018
     */
    MCAPI static std::vector<enum class Enchant::Type> const VALID_ENCHANTMENTS;

};