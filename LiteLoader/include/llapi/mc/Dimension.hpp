/**
 * @file  Dimension.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class DimensionHeightRange
{
public:
    short min;
    short max;
};
#undef BEFORE_EXTRA

/**
 * @brief MC class Dimension.
 *
 */
class Dimension {

#define AFTER_EXTRA
// Add Member There
#define ENABLE_VIRTUAL_FAKESYMBOL_DIMENSION
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_DIMENSION
public:
    class Dimension& operator=(class Dimension const &) = delete;
    Dimension(class Dimension const &) = delete;
    Dimension() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_DIMENSION
    /**
     * @symbol ?_createChunkBuildOrderPolicy@Dimension@@EEAA?AV?$unique_ptr@VChunkBuildOrderPolicyBase@@U?$default_delete@VChunkBuildOrderPolicyBase@@@std@@@std@@XZ
     * @hash   -34660984
     */
    MCVAPI std::unique_ptr<class ChunkBuildOrderPolicyBase> _createChunkBuildOrderPolicy();
    /**
     * @symbol ?deserialize@Dimension@@UEAAXAEBVCompoundTag@@@Z
     * @hash   578320778
     */
    MCVAPI void deserialize(class CompoundTag const &);
    /**
     * @symbol ?forceCheckAllNeighChunkSavedStat@Dimension@@UEBA_NXZ
     * @hash   -676699185
     */
    MCVAPI bool forceCheckAllNeighChunkSavedStat() const;
    /**
     * @symbol ?getBrightnessDependentFogColor@Dimension@@UEBA?AVColor@mce@@AEBV23@M@Z
     * @hash   211595303
     */
    MCVAPI class mce::Color getBrightnessDependentFogColor(class mce::Color const &, float) const;
    /**
     * @symbol ?getBrightnessRamp@Dimension@@UEBAAEBVDimensionBrightnessRamp@@XZ
     * @hash   1019240511
     */
    MCVAPI class DimensionBrightnessRamp const & getBrightnessRamp() const;
    /**
     * @symbol ?getClearColorScale@Dimension@@UEAAMXZ
     * @hash   -1174619769
     */
    MCVAPI float getClearColorScale();
    /**
     * @symbol ?getCloudHeight@Dimension@@UEBAFXZ
     * @hash   -1042547394
     */
    MCVAPI short getCloudHeight() const;
    /**
     * @symbol ?getDefaultBiome@Dimension@@UEBA?AVHashedString@@XZ
     * @hash   671543504
     */
    MCVAPI class HashedString getDefaultBiome() const;
    /**
     * @symbol ?getDimensionId@Dimension@@UEBA?AV?$AutomaticID@VDimension@@H@@XZ
     * @hash   -1353890751
     */
    MCVAPI class AutomaticID<class Dimension, int> getDimensionId() const;
    /**
     * @symbol ?getLightTextureImageBuilder@Dimension@@UEBAPEAVBaseLightTextureImageBuilder@@XZ
     * @hash   -1218979813
     */
    MCVAPI class BaseLightTextureImageBuilder * getLightTextureImageBuilder() const;
    /**
     * @symbol ?getSpawnPos@Dimension@@UEBA?AVBlockPos@@XZ
     * @hash   -824556095
     */
    MCVAPI class BlockPos getSpawnPos() const;
    /**
     * @symbol ?getSpawnYPosition@Dimension@@UEBAHXZ
     * @hash   1726022194
     */
    MCVAPI int getSpawnYPosition() const;
    /**
     * @symbol ?getSunIntensity@Dimension@@UEBAMMAEBVVec3@@M@Z
     * @hash   -746596309
     */
    MCVAPI float getSunIntensity(float, class Vec3 const &, float) const;
    /**
     * @symbol ?getTimeOfDay@Dimension@@MEBAMHM@Z
     * @hash   907036230
     */
    MCVAPI float getTimeOfDay(int, float) const;
    /**
     * @symbol ?hasBedrockFog@Dimension@@UEAA_NXZ
     * @hash   -1515825819
     */
    MCVAPI bool hasBedrockFog();
    /**
     * @symbol ?hasGround@Dimension@@UEBA_NXZ
     * @hash   211451075
     */
    MCVAPI bool hasGround() const;
    /**
     * @symbol ?hasPrecipitationFog@Dimension@@UEBA_NXZ
     * @hash   1705293767
     */
    MCVAPI bool hasPrecipitationFog() const;
    /**
     * @symbol ?init@Dimension@@UEAAXXZ
     * @hash   482992161
     */
    MCVAPI void init();
    /**
     * @symbol ?is2DPositionRelevantForPlayer@Dimension@@UEBA_NAEBVBlockPos@@AEAVPlayer@@@Z
     * @hash   -547727885
     */
    MCVAPI bool is2DPositionRelevantForPlayer(class BlockPos const &, class Player &) const;
    /**
     * @symbol ?isActorRelevantForPlayer@Dimension@@UEBA_NAEAVPlayer@@AEBVActor@@@Z
     * @hash   -1082023275
     */
    MCVAPI bool isActorRelevantForPlayer(class Player &, class Actor const &) const;
    /**
     * @symbol ?isDay@Dimension@@UEBA_NXZ
     * @hash   -1849287116
     */
    MCVAPI bool isDay() const;
    /**
     * @symbol ?isFoggyAt@Dimension@@UEBA_NHH@Z
     * @hash   -1908696789
     */
    MCVAPI bool isFoggyAt(int, int) const;
    /**
     * @symbol ?isNaturalDimension@Dimension@@UEBA_NXZ
     * @hash   -814599671
     */
    MCVAPI bool isNaturalDimension() const;
    /**
     * @symbol ?isValidSpawn@Dimension@@UEBA_NHH@Z
     * @hash   -1487223141
     */
    MCVAPI bool isValidSpawn(int, int) const;
    /**
     * @symbol ?mayRespawnViaBed@Dimension@@UEBA_NXZ
     * @hash   1778778968
     */
    MCVAPI bool mayRespawnViaBed() const;
    /**
     * @symbol ?onBlockChanged@Dimension@@UEAAXAEAVBlockSource@@AEBVBlockPos@@IAEBVBlock@@2HPEBUActorBlockSyncMessage@@W4BlockChangedEventTarget@@PEAVActor@@@Z
     * @hash   40910639
     */
    MCVAPI void onBlockChanged(class BlockSource &, class BlockPos const &, unsigned int, class Block const &, class Block const &, int, struct ActorBlockSyncMessage const *, enum class BlockChangedEventTarget, class Actor *);
    /**
     * @symbol ?onBlockEvent@Dimension@@UEAAXAEAVBlockSource@@HHHHH@Z
     * @hash   1632077144
     */
    MCVAPI void onBlockEvent(class BlockSource &, int, int, int, int, int);
    /**
     * @symbol ?onChunkLoaded@Dimension@@UEAAXAEAVChunkSource@@AEAVLevelChunk@@@Z
     * @hash   396799099
     */
    MCVAPI void onChunkLoaded(class ChunkSource &, class LevelChunk &);
    /**
     * @symbol ?onLevelDestruction@Dimension@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   1365659182
     */
    MCVAPI void onLevelDestruction(std::string const &);
    /**
     * @symbol ?sendBroadcast@Dimension@@UEAAXAEBVPacket@@PEAVPlayer@@@Z
     * @hash   -324484064
     */
    MCVAPI void sendBroadcast(class Packet const &, class Player *);
    /**
     * @symbol ?serialize@Dimension@@UEBAXAEAVCompoundTag@@@Z
     * @hash   -228803685
     */
    MCVAPI void serialize(class CompoundTag &) const;
    /**
     * @symbol ?showSky@Dimension@@UEBA_NXZ
     * @hash   -1208746042
     */
    MCVAPI bool showSky() const;
    /**
     * @symbol ?startLeaveGame@Dimension@@UEAAXXZ
     * @hash   -1684768088
     */
    MCVAPI void startLeaveGame();
    /**
     * @symbol ?tick@Dimension@@UEAAXXZ
     * @hash   1753171470
     */
    MCVAPI void tick();
    /**
     * @symbol ?tickRedstone@Dimension@@UEAAXXZ
     * @hash   2003091394
     */
    MCVAPI void tickRedstone();
    /**
     * @symbol ??1Dimension@@UEAA@XZ
     * @hash   -1964235448
     */
    MCVAPI ~Dimension();
#endif
    /**
     * @symbol ??0Dimension@@QEAA@AEAVILevel@@V?$AutomaticID@VDimension@@H@@VDimensionHeightRange@@AEAVScheduler@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   -817199885
     */
    MCAPI Dimension(class ILevel &, class AutomaticID<class Dimension, int>, class DimensionHeightRange, class Scheduler &, std::string);
    /**
     * @symbol ?addActorUnloadedChunkTransferToQueue@Dimension@@QEAAXAEBVChunkPos@@0V?$AutomaticID@VDimension@@H@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$unique_ptr@VCompoundTag@@U?$default_delete@VCompoundTag@@@std@@@5@@Z
     * @hash   -1294622059
     */
    MCAPI void addActorUnloadedChunkTransferToQueue(class ChunkPos const &, class ChunkPos const &, class AutomaticID<class Dimension, int>, std::string &, std::unique_ptr<class CompoundTag>);
    /**
     * @symbol ?addPlayerToReplication@Dimension@@QEAAXAEBVWeakEntityRef@@@Z
     * @hash   -741435340
     */
    MCAPI void addPlayerToReplication(class WeakEntityRef const &);
    /**
     * @symbol ?addWither@Dimension@@QEAAXAEBUActorUniqueID@@@Z
     * @hash   1263514632
     */
    MCAPI void addWither(struct ActorUniqueID const &);
    /**
     * @symbol ?clearPlayerReplicationList@Dimension@@QEAAXXZ
     * @hash   -1517134453
     */
    MCAPI void clearPlayerReplicationList();
    /**
     * @symbol ?distanceToNearestPlayerSqr2D@Dimension@@QEAAMVVec3@@@Z
     * @hash   1012658047
     */
    MCAPI float distanceToNearestPlayerSqr2D(class Vec3);
    /**
     * @symbol ?fetchAnyInteractablePlayer@Dimension@@QEBAPEAVPlayer@@AEBVVec3@@M@Z
     * @hash   -471293487
     */
    MCAPI class Player * fetchAnyInteractablePlayer(class Vec3 const &, float) const;
    /**
     * @symbol ?fetchEntity@Dimension@@QEBAPEAVActor@@UActorUniqueID@@_N@Z
     * @hash   -710951937
     */
    MCAPI class Actor * fetchEntity(struct ActorUniqueID, bool) const;
    /**
     * @symbol ?fetchNearestAttackablePlayer@Dimension@@QEAAPEAVPlayer@@VBlockPos@@MPEAVActor@@@Z
     * @hash   -802932437
     */
    MCAPI class Player * fetchNearestAttackablePlayer(class BlockPos, float, class Actor *);
    /**
     * @symbol ?fetchNearestAttackablePlayer@Dimension@@QEAAPEAVPlayer@@AEAVActor@@M@Z
     * @hash   -1576649603
     */
    MCAPI class Player * fetchNearestAttackablePlayer(class Actor &, float);
    /**
     * @symbol ?fetchNearestInteractablePlayer@Dimension@@QEBAPEAVPlayer@@AEBVVec3@@M@Z
     * @hash   910073877
     */
    MCAPI class Player * fetchNearestInteractablePlayer(class Vec3 const &, float) const;
    /**
     * @symbol ?fetchNearestInteractablePlayer@Dimension@@QEBAPEAVPlayer@@AEAVActor@@M@Z
     * @hash   -1256796259
     */
    MCAPI class Player * fetchNearestInteractablePlayer(class Actor &, float) const;
    /**
     * @symbol ?fetchNearestPlayer@Dimension@@QEBAPEAVPlayer@@AEBVVec3@@M_NV?$function@$$A6A_NAEBVPlayer@@@Z@std@@@Z
     * @hash   442173361
     */
    MCAPI class Player * fetchNearestPlayer(class Vec3 const &, float, bool, class std::function<bool (class Player const &)>) const;
    /**
     * @symbol ?findPlayer@Dimension@@QEBAPEAVPlayer@@V?$function@$$A6A_NAEBVPlayer@@@Z@std@@@Z
     * @hash   1654679564
     */
    MCAPI class Player * findPlayer(class std::function<bool (class Player const &)>) const;
    /**
     * @symbol ?flagEntityforChunkMove@Dimension@@QEAAXAEAVActor@@@Z
     * @hash   -427078252
     */
    MCAPI void flagEntityforChunkMove(class Actor &);
    /**
     * @symbol ?flushLevelChunkGarbageCollector@Dimension@@QEAAXXZ
     * @hash   -1730571489
     */
    MCAPI void flushLevelChunkGarbageCollector();
    /**
     * @symbol ?flushRunTimeLighting@Dimension@@QEAAXXZ
     * @hash   1145883203
     */
    MCAPI void flushRunTimeLighting();
    /**
     * @symbol ?forEachPlayer@Dimension@@QEBAXV?$function@$$A6A_NAEAVPlayer@@@Z@std@@@Z
     * @hash   2086082320
     */
    MCAPI void forEachPlayer(class std::function<bool (class Player &)>) const;
    /**
     * @symbol ?forceSaveVillageManager@Dimension@@QEAAXXZ
     * @hash   334163895
     */
    MCAPI void forceSaveVillageManager();
    /**
     * @symbol ?getBlockEventDispatcher@Dimension@@QEAAAEAVBlockEventDispatcher@@XZ
     * @hash   760752792
     */
    MCAPI class BlockEventDispatcher & getBlockEventDispatcher();
    /**
     * @symbol ?getBlockSourceFromMainChunkSource@Dimension@@QEBAAEAVBlockSource@@XZ
     * @hash   -1997801508
     */
    MCAPI class BlockSource & getBlockSourceFromMainChunkSource() const;
    /**
     * @symbol ?getChunkBuildOrderPolicy@Dimension@@QEAAAEAVChunkBuildOrderPolicyBase@@XZ
     * @hash   1649194440
     */
    MCAPI class ChunkBuildOrderPolicyBase & getChunkBuildOrderPolicy();
    /**
     * @symbol ?getChunkLoadActionList@Dimension@@QEAA?AV?$not_null@PEAVChunkLoadActionList@@@gsl@@XZ
     * @hash   1310359199
     */
    MCAPI class gsl::not_null<class ChunkLoadActionList *> getChunkLoadActionList();
    /**
     * @symbol ?getChunkSource@Dimension@@QEBAAEAVChunkSource@@XZ
     * @hash   -1921896584
     */
    MCAPI class ChunkSource & getChunkSource() const;
    /**
     * @symbol ?getCircuitSystem@Dimension@@QEAAAEAVCircuitSystem@@XZ
     * @hash   -537935062
     */
    MCAPI class CircuitSystem & getCircuitSystem();
    /**
     * @symbol ?getDelayActionList@Dimension@@QEAA?AV?$not_null@PEAVDelayActionList@@@gsl@@XZ
     * @hash   1077326655
     */
    MCAPI class gsl::not_null<class DelayActionList *> getDelayActionList();
    /**
     * @symbol ?getDisplayEntities@Dimension@@QEAAAEAV?$vector@VWeakEntityRef@@V?$allocator@VWeakEntityRef@@@std@@@std@@XZ
     * @hash   706582434
     */
    MCAPI std::vector<class WeakEntityRef> & getDisplayEntities();
    /**
     * @symbol ?getEntityIdMap@Dimension@@QEAAAEAV?$unordered_map@UActorUniqueID@@VWeakEntityRef@@U?$hash@UActorUniqueID@@@std@@U?$equal_to@UActorUniqueID@@@4@V?$allocator@U?$pair@$$CBUActorUniqueID@@VWeakEntityRef@@@std@@@4@@std@@XZ
     * @hash   -1295724109
     */
    MCAPI class std::unordered_map<struct ActorUniqueID, class WeakEntityRef, struct std::hash<struct ActorUniqueID>, struct std::equal_to<struct ActorUniqueID>, class std::allocator<struct std::pair<struct ActorUniqueID const, class WeakEntityRef>>> & getEntityIdMap();
    /**
     * @symbol ?getEntityIdMapConst@Dimension@@QEBAAEBV?$unordered_map@UActorUniqueID@@VWeakEntityRef@@U?$hash@UActorUniqueID@@@std@@U?$equal_to@UActorUniqueID@@@4@V?$allocator@U?$pair@$$CBUActorUniqueID@@VWeakEntityRef@@@std@@@4@@std@@XZ
     * @hash   -470293259
     */
    MCAPI class std::unordered_map<struct ActorUniqueID, class WeakEntityRef, struct std::hash<struct ActorUniqueID>, struct std::equal_to<struct ActorUniqueID>, class std::allocator<struct std::pair<struct ActorUniqueID const, class WeakEntityRef>>> const & getEntityIdMapConst() const;
    /**
     * @symbol ?getFeatureTerrainAdjustments@Dimension@@QEAAAEAVFeatureTerrainAdjustments@@XZ
     * @hash   -1353092550
     */
    MCAPI class FeatureTerrainAdjustments & getFeatureTerrainAdjustments();
    /**
     * @symbol ?getGameEventDispatcher@Dimension@@QEBAPEAVGameEventDispatcher@@XZ
     * @hash   -1756939051
     */
    MCAPI class GameEventDispatcher * getGameEventDispatcher() const;
    /**
     * @symbol ?getHeight@Dimension@@QEBAFXZ
     * @hash   1407563863
     */
    MCAPI short getHeight() const;
    /**
     * @symbol ?getHeightInSubchunks@Dimension@@QEBAGXZ
     * @hash   1803190205
     */
    MCAPI unsigned short getHeightInSubchunks() const;
    /**
     * @symbol ?getHeightRange@Dimension@@QEBAAEBVDimensionHeightRange@@XZ
     * @hash   670883920
     */
    MCAPI class DimensionHeightRange const & getHeightRange() const;
    /**
     * @symbol ?getLevel@Dimension@@QEBAAEAVLevel@@XZ
     * @hash   1866725320
     */
    MCAPI class Level & getLevel() const;
    /**
     * @symbol ?getLevelConst@Dimension@@QEBAAEBVLevel@@XZ
     * @hash   23867060
     */
    MCAPI class Level const & getLevelConst() const;
    /**
     * @symbol ?getMinHeight@Dimension@@QEBAFXZ
     * @hash   -1441073855
     */
    MCAPI short getMinHeight() const;
    /**
     * @symbol ?getMoonBrightness@Dimension@@QEBAMXZ
     * @hash   -2038459018
     */
    MCAPI float getMoonBrightness() const;
    /**
     * @symbol ?getMoonPhase@Dimension@@QEBAHXZ
     * @hash   -1799237010
     */
    MCAPI int getMoonPhase() const;
    /**
     * @symbol ?getPopCap@Dimension@@QEBAMH_N@Z
     * @hash   634949586
     */
    MCAPI float getPopCap(int, bool) const;
    /**
     * @symbol ?getSeasons@Dimension@@QEAAAEAVSeasons@@XZ
     * @hash   -118385078
     */
    MCAPI class Seasons & getSeasons();
    /**
     * @symbol ?getSkyDarken@Dimension@@QEBA?AUBrightness@@XZ
     * @hash   2019545118
     */
    MCAPI struct Brightness getSkyDarken() const;
    /**
     * @symbol ?getSunAngle@Dimension@@QEBAMM@Z
     * @hash   703555607
     */
    MCAPI float getSunAngle(float) const;
    /**
     * @symbol ?getTickingAreas@Dimension@@QEAAAEAVTickingAreaList@@XZ
     * @hash   1573443750
     */
    MCAPI class TickingAreaList & getTickingAreas();
    /**
     * @symbol ?getTickingAreasConst@Dimension@@QEBAAEBVTickingAreaList@@XZ
     * @hash   806835240
     */
    MCAPI class TickingAreaList const & getTickingAreasConst() const;
    /**
     * @symbol ?getTimeOfDay@Dimension@@QEBAMM@Z
     * @hash   -327686385
     */
    MCAPI float getTimeOfDay(float) const;
    /**
     * @symbol ?getVillageManager@Dimension@@QEBAAEBV?$unique_ptr@VVillageManager@@U?$default_delete@VVillageManager@@@std@@@std@@XZ
     * @hash   -882224722
     */
    MCAPI std::unique_ptr<class VillageManager> const & getVillageManager() const;
    /**
     * @symbol ?getWeakRef@Dimension@@QEAA?AV?$WeakRefT@U?$SharePtrRefTraits@VDimension@@@@@@XZ
     * @hash   860361224
     */
    MCAPI class WeakRefT<struct SharePtrRefTraits<class Dimension>> getWeakRef();
    /**
     * @symbol ?getWeather@Dimension@@QEBAAEAVWeather@@XZ
     * @hash   -1729665816
     */
    MCAPI class Weather & getWeather() const;
    /**
     * @symbol ?getWorldGenerator@Dimension@@QEBAPEAVWorldGenerator@@XZ
     * @hash   -1419211655
     */
    MCAPI class WorldGenerator * getWorldGenerator() const;
    /**
     * @symbol ?hasCeiling@Dimension@@QEBA_NXZ
     * @hash   -1905914924
     */
    MCAPI bool hasCeiling() const;
    /**
     * @symbol ?hasSkylight@Dimension@@QEBA_NXZ
     * @hash   -402801214
     */
    MCAPI bool hasSkylight() const;
    /**
     * @symbol ?isChunkKnown@Dimension@@QEBA_NAEBVChunkPos@@@Z
     * @hash   143202003
     */
    MCAPI bool isChunkKnown(class ChunkPos const &) const;
    /**
     * @symbol ?isClientSideGenerationEnabled@Dimension@@QEBA?B_NXZ
     * @hash   644104716
     */
    MCAPI bool const isClientSideGenerationEnabled() const;
    /**
     * @symbol ?isHeightWithinRange@Dimension@@QEBA_NAEBF@Z
     * @hash   1271551945
     */
    MCAPI bool isHeightWithinRange(short const &) const;
    /**
     * @symbol ?isLeaveGameDone@Dimension@@QEAA_NXZ
     * @hash   1564911330
     */
    MCAPI bool isLeaveGameDone();
    /**
     * @symbol ?isRedstoneTick@Dimension@@QEAA_NXZ
     * @hash   -900945692
     */
    MCAPI bool isRedstoneTick();
    /**
     * @symbol ?isSubChunkHeightWithinRange@Dimension@@QEBA_NAEBF@Z
     * @hash   519940467
     */
    MCAPI bool isSubChunkHeightWithinRange(short const &) const;
    /**
     * @symbol ?isUltraWarm@Dimension@@QEBA_NXZ
     * @hash   1894056722
     */
    MCAPI bool isUltraWarm() const;
    /**
     * @symbol ?onStaticTickingAreaAdded@Dimension@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
     * @hash   -588522184
     */
    MCAPI void onStaticTickingAreaAdded(std::string const &);
    /**
     * @symbol ?processPlayerReplication@Dimension@@QEAAXXZ
     * @hash   -1945886293
     */
    MCAPI void processPlayerReplication();
    /**
     * @symbol ?registerDisplayEntity@Dimension@@QEAAXV?$WeakRefT@UEntityRefTraits@@@@@Z
     * @hash   1133914699
     */
    MCAPI void registerDisplayEntity(class WeakRefT<struct EntityRefTraits>);
    /**
     * @symbol ?registerEntity@Dimension@@QEAAXAEBUActorUniqueID@@V?$WeakRefT@UEntityRefTraits@@@@@Z
     * @hash   1997363802
     */
    MCAPI void registerEntity(struct ActorUniqueID const &, class WeakRefT<struct EntityRefTraits>);
    /**
     * @symbol ?removeActorByID@Dimension@@QEAAXAEBUActorUniqueID@@@Z
     * @hash   -100164342
     */
    MCAPI void removeActorByID(struct ActorUniqueID const &);
    /**
     * @symbol ?removeWither@Dimension@@QEAAXAEBUActorUniqueID@@@Z
     * @hash   1672212836
     */
    MCAPI void removeWither(struct ActorUniqueID const &);
    /**
     * @symbol ?sendPacketForEntity@Dimension@@QEAAXAEBVActor@@AEBVPacket@@PEBVPlayer@@@Z
     * @hash   355302391
     */
    MCAPI void sendPacketForEntity(class Actor const &, class Packet const &, class Player const *);
    /**
     * @symbol ?sendPacketForPosition@Dimension@@QEAAXAEBVBlockPos@@AEBVPacket@@PEBVPlayer@@@Z
     * @hash   1478492785
     */
    MCAPI void sendPacketForPosition(class BlockPos const &, class Packet const &, class Player const *);
    /**
     * @symbol ?sendPacketToClients@Dimension@@QEAAXAEBVPacket@@V?$vector@UNetworkIdentifierWithSubId@@V?$allocator@UNetworkIdentifierWithSubId@@@std@@@std@@@Z
     * @hash   -352134421
     */
    MCAPI void sendPacketToClients(class Packet const &, std::vector<struct NetworkIdentifierWithSubId>);
    /**
     * @symbol ?setCeiling@Dimension@@QEAAX_N@Z
     * @hash   484157656
     */
    MCAPI void setCeiling(bool);
    /**
     * @symbol ?setSkylight@Dimension@@QEAAX_N@Z
     * @hash   233289930
     */
    MCAPI void setSkylight(bool);
    /**
     * @symbol ?setUltraWarm@Dimension@@QEAAX_N@Z
     * @hash   1597600440
     */
    MCAPI void setUltraWarm(bool);
    /**
     * @symbol ?transferEntity@Dimension@@QEAAXAEBVChunkPos@@AEBVVec3@@V?$unique_ptr@VCompoundTag@@U?$default_delete@VCompoundTag@@@std@@@std@@_N@Z
     * @hash   -1578172065
     */
    MCAPI void transferEntity(class ChunkPos const &, class Vec3 const &, std::unique_ptr<class CompoundTag>, bool);
    /**
     * @symbol ?transferEntityToUnloadedChunk@Dimension@@QEAAXAEAVActor@@PEAVLevelChunk@@@Z
     * @hash   -2099667616
     */
    MCAPI void transferEntityToUnloadedChunk(class Actor &, class LevelChunk *);
    /**
     * @symbol ?transferEntityToUnloadedChunk@Dimension@@QEAAXAEBVChunkPos@@0V?$AutomaticID@VDimension@@H@@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$unique_ptr@VCompoundTag@@U?$default_delete@VCompoundTag@@@std@@@5@@Z
     * @hash   -591288553
     */
    MCAPI void transferEntityToUnloadedChunk(class ChunkPos const &, class ChunkPos const &, class AutomaticID<class Dimension, int>, std::string &, std::unique_ptr<class CompoundTag>);
    /**
     * @symbol ?tryGarbageCollectStructures@Dimension@@QEAAXXZ
     * @hash   -290244971
     */
    MCAPI void tryGarbageCollectStructures();
    /**
     * @symbol ?tryGetClosestPublicRegion@Dimension@@QEBAPEAVBlockSource@@AEBVChunkPos@@@Z
     * @hash   -1662007798
     */
    MCAPI class BlockSource * tryGetClosestPublicRegion(class ChunkPos const &) const;
    /**
     * @symbol ?tryLoadLimboEntities@Dimension@@QEAAXAEBVChunkPos@@@Z
     * @hash   1013751446
     */
    MCAPI void tryLoadLimboEntities(class ChunkPos const &);
    /**
     * @symbol ?unregisterDisplayEntity@Dimension@@QEAAXV?$WeakRefT@UEntityRefTraits@@@@@Z
     * @hash   -1318965429
     */
    MCAPI void unregisterDisplayEntity(class WeakRefT<struct EntityRefTraits>);
    /**
     * @symbol ?unregisterEntity@Dimension@@QEAAXAEBUActorUniqueID@@@Z
     * @hash   404357812
     */
    MCAPI void unregisterEntity(struct ActorUniqueID const &);
    /**
     * @symbol ?updateBlockLight@Dimension@@QEAAXAEBVBlockPos@@UBrightness@@111_N@Z
     * @hash   282080520
     */
    MCAPI void updateBlockLight(class BlockPos const &, struct Brightness, struct Brightness, struct Brightness, struct Brightness, bool);
    /**
     * @symbol ?updateDimensionBlockSourceTick@Dimension@@QEAAXXZ
     * @hash   1560493635
     */
    MCAPI void updateDimensionBlockSourceTick();
    /**
     * @symbol ?CurrentLimboEntitiesVersion@Dimension@@2W4LimboEntitiesVersion@@B
     * @hash   -79122479
     */
    MCAPI static enum class LimboEntitiesVersion const CurrentLimboEntitiesVersion;
    /**
     * @symbol ?LOW_CPU_PACKET_BLOCK_LIMIT@Dimension@@2IB
     * @hash   -60806433
     */
    MCAPI static unsigned int const LOW_CPU_PACKET_BLOCK_LIMIT;
    /**
     * @symbol ?MOON_BRIGHTNESS_PER_PHASE@Dimension@@2QBMB
     * @hash   83764840
     */
    MCAPI static float const MOON_BRIGHTNESS_PER_PHASE[];
    /**
     * @symbol ?STRUCTURE_PRUNE_INTERVAL@Dimension@@2V?$duration@_JU?$ratio@$00$00@std@@@chrono@std@@B
     * @hash   1214583889
     */
    MCAPI static class std::chrono::duration<__int64, struct std::ratio<1, 1>> const STRUCTURE_PRUNE_INTERVAL;

//protected:
    /**
     * @symbol ?_completeEntityTransfer@Dimension@@IEAAXAEAVBlockSource@@V?$OwnerPtrT@UEntityRefTraits@@@@_N@Z
     * @hash   -372766029
     */
    MCAPI void _completeEntityTransfer(class BlockSource &, class OwnerPtrT<struct EntityRefTraits>, bool);

//private:
    /**
     * @symbol ?_processEntityChunkTransfers@Dimension@@AEAAXXZ
     * @hash   -1026977884
     */
    MCAPI void _processEntityChunkTransfers();
    /**
     * @symbol ?_sendBlockEntityUpdatePacket@Dimension@@AEAAXAEBVNetworkBlockPosition@@@Z
     * @hash   -215924047
     */
    MCAPI void _sendBlockEntityUpdatePacket(class NetworkBlockPosition const &);
    /**
     * @symbol ?_sendBlocksChangedPackets@Dimension@@AEAAXXZ
     * @hash   1423955466
     */
    MCAPI void _sendBlocksChangedPackets();
    /**
     * @symbol ?_tickEntityChunkMoves@Dimension@@AEAAXXZ
     * @hash   833974586
     */
    MCAPI void _tickEntityChunkMoves();

protected:

private:

};