// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ClassroomModeNetworkHandler {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CLASSROOMMODENETWORKHANDLER
public:
    class ClassroomModeNetworkHandler& operator=(class ClassroomModeNetworkHandler const &) = delete;
    ClassroomModeNetworkHandler(class ClassroomModeNetworkHandler const &) = delete;
    ClassroomModeNetworkHandler() = delete;
#endif

public:
    /*
    inline bool allowIncomingPacketId(class NetworkIdentifier const & a0, enum MinecraftPacketIds a1){
        bool (ClassroomModeNetworkHandler::*rv)(class NetworkIdentifier const &, enum MinecraftPacketIds);
        *((void**)&rv) = dlsym("?allowIncomingPacketId@ClassroomModeNetworkHandler@@UEAA_NAEBVNetworkIdentifier@@W4MinecraftPacketIds@@@Z");
        return (this->*rv)(std::forward<class NetworkIdentifier const &>(a0), std::forward<enum MinecraftPacketIds>(a1));
    }
    inline void onWebsocketRequest(std::string const & a0, std::string const & a1, class std::function<void (void)> a2){
        void (ClassroomModeNetworkHandler::*rv)(std::string const &, std::string const &, class std::function<void (void)>);
        *((void**)&rv) = dlsym("?onWebsocketRequest@ClassroomModeNetworkHandler@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0V?$function@$$A6AXXZ@3@@Z");
        return (this->*rv)(std::forward<std::string const &>(a0), std::forward<std::string const &>(a1), std::forward<class std::function<void (void)>>(a2));
    }
    */
    MCAPI ClassroomModeNetworkHandler(bool);

protected:

private:
    MCAPI void _connect(std::string const &);

};