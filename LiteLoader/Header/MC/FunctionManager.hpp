// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class FunctionManager {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_FUNCTIONMANAGER
public:
    class FunctionManager& operator=(class FunctionManager const &) = delete;
    FunctionManager(class FunctionManager const &) = delete;
    FunctionManager() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_FUNCTIONMANAGER
#endif
    MCAPI FunctionManager(std::unique_ptr<class ICommandDispatcher>, std::unique_ptr<class CommandOrigin>, class GameRule const *);
    MCAPI int execute(class FunctionEntry &, class CommandOrigin const &, enum FunctionQueueOrder);
    MCAPI class ICommandDispatcher & getCommandDispatcher();
    MCAPI class FunctionEntry * getFunction(std::string const &);
    MCAPI void load(class ResourcePackManager &, class CommandRegistry &);
    MCAPI void queueCommands(std::vector<std::unique_ptr<class IFunctionEntry>> const &, class CommandOrigin const &, enum FunctionQueueOrder);
    MCAPI void tick();
    MCAPI static enum FunctionQueueOrder getQueueOrderForCommandVersion(enum CurrentCmdVersion);

protected:
    MCAPI void _addTickFunctionsFromJson(class Json::Value const &, enum CurrentCmdVersion);
    MCAPI void _processFunctionEntry(std::string const &, std::vector<std::string> const &, std::vector<std::string> &, enum CurrentCmdVersion, class CommandRegistry const &);

private:
    MCAPI class CommandOrigin const & _addOriginReference(class CommandOrigin const &, unsigned int);
    MCAPI void _queueCommandsAfterCaller(std::vector<std::unique_ptr<class IFunctionEntry>> const &, class CommandOrigin const &);
    MCAPI void _removeOriginReference(class CommandOrigin const &, unsigned int);

};