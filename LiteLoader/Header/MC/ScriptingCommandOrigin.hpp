// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "CommandOrigin.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ScriptingCommandOrigin : public CommandOrigin {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCRIPTINGCOMMANDORIGIN
public:
    class ScriptingCommandOrigin& operator=(class ScriptingCommandOrigin const &) = delete;
    ScriptingCommandOrigin(class ScriptingCommandOrigin const &) = delete;
    ScriptingCommandOrigin() = delete;
#endif

public:
    /*0*/ virtual ~ScriptingCommandOrigin();
    /*1*/ virtual std::string const & getRequestId() const;
    /*2*/ virtual std::string getName() const;
    /*3*/ virtual class BlockPos getBlockPosition() const;
    /*4*/ virtual class Vec3 getWorldPosition() const;
    /*5*/ virtual class std::optional<class Vec2> getRotation() const;
    /*6*/ virtual class Level * getLevel() const;
    /*7*/ virtual class Dimension * getDimension() const;
    /*8*/ virtual class Actor * getEntity() const;
    /*9*/ virtual enum CommandPermissionLevel getPermissionsLevel() const;
    /*10*/ virtual std::unique_ptr<class CommandOrigin> clone() const;
    /*17*/ virtual void __unk_vfn_17();
    /*18*/ virtual bool isSelectorExpansionAllowed() const;
    /*23*/ virtual enum CommandOriginType getOriginType() const;
    /*26*/ virtual void handleCommandOutputCallback(class Json::Value &&) const;
    /*30*/ virtual bool isValid() const;
    /*
    inline bool canUseCommandsWithoutCheatsEnabled() const{
        bool (ScriptingCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?canUseCommandsWithoutCheatsEnabled@ScriptingCommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI ScriptingCommandOrigin(class ServerLevel &, class Dimension *, class std::function<void (class Json::Value &&)>);
    MCAPI void __autoclassinit2(unsigned __int64);

protected:

private:

};