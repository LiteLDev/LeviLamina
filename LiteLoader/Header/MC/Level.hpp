// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"
#include "PlayerCapabilities.hpp"
#include "DimensionDefinitionGroup.hpp"

#define BEFORE_EXTRA
// Add include headers & pre-declares
#include "Core.hpp"
#include "BlockInstance.hpp"
#include "Tick.hpp"
#include "Social.hpp"
class Actor;
class ActorDamageSource;
class ItemStack;
class ItemActor;
class Block;
class CompoundTag;
class Player;
class BlockSource;
class BlockPalette;
class Container;
class Dimension;
struct ActorUniqueID;
class Packet;
#undef BEFORE_EXTRA

class Level {

#define AFTER_EXTRA
// Add new members to class
public:

    #define ENABLE_VIRTUAL_FAKESYMBOL_LEVEL
    //Entity & Player
    LIAPI static void forEachPlayer(class std::function<bool(class Player&)> callback);
    LIAPI static void forEachPlayer(class std::function<bool(class Player const&)> callback);
    LIAPI static std::vector<Player*> getAllPlayers();
    LIAPI static Player* getPlayer(const string& info);     // name or xuid
    LIAPI static Player* getPlayer(ActorUniqueID id);       // UniqueID
    LIAPI static Actor* getEntity(ActorUniqueID id);
    LIAPI static std::vector<Actor*> getAllEntities(int dimId);
    LIAPI static std::vector<Actor*> getAllEntities();
    LIAPI static Actor* spawnMob(Vec3 pos, int dimId, std::string typeName);
    LIAPI static Actor* spawnItem(Vec3 pos, int dimId, ItemStack *item);
    LIAPI static bool createExplosion(Vec3 pos, int dimId, Actor* source, float radius, bool createFire, bool canBreak, float maxResistance = 3.40282347e+38);
    LIAPI static class MapItemSavedData* getMapSavedData(struct ActorUniqueID a0);
    LIAPI static Actor* cloneMob(Vec3 pos, int dimId, Actor* ac);
	
    //Block
    LIAPI static Block* getBlock(BlockPos* pos, int dimId);
    LIAPI static Block* getBlock(BlockPos* pos, BlockSource* blockSource);
    LIAPI static Block* getBlock(const BlockPos& pos, int dimId);
    LIAPI static Block* getBlock(const BlockPos& pos, BlockSource *blockSource);
    LIAPI static Block* getBlockEx(const BlockPos& pos, int dimId);
    LIAPI static BlockInstance getBlockInstance(BlockPos* pos, int dimId);
    LIAPI static BlockInstance getBlockInstance(BlockPos* pos, BlockSource* blockSource);
    LIAPI static BlockInstance getBlockInstance(const BlockPos& pos, int dimId);
    LIAPI static BlockInstance getBlockInstance(const BlockPos& pos, BlockSource* blockSource);
    LIAPI static BlockActor* getBlockEntity(BlockPos* pos, int dimId);
    LIAPI static BlockActor* getBlockEntity(BlockPos* pos, BlockSource* blockSource);
    LIAPI static BlockActor* getBlockEntity(const BlockPos& pos, int dimId);
    LIAPI static BlockActor* getBlockEntity(const BlockPos& pos, BlockSource* blockSource);
    LIAPI static bool setBlock(const BlockPos& pos, int dim, Block* block);
    LIAPI static bool setBlock(const BlockPos& pos, int dim, const string& name, unsigned short tileData);
    LIAPI static bool setBlock(const BlockPos& pos, int dim, CompoundTag* nbt);
    LIAPI static bool breakBlockNaturally(BlockSource* bs, const BlockPos& pos);
    LIAPI static bool breakBlockNaturally(BlockSource* bs, const BlockPos& pos, ItemStack* tool);
    LIAPI static bool destroyBlock(class BlockSource& bs, class BlockPos const& pos, bool a2);
    LIAPI static void spawnParticleEffect(std::string const& type, class Vec3 const& pos, class Dimension* a2);
    LIAPI static void spawnParticleEffect(std::string const& type, class Actor const& a1, class Vec3 const& a2);
    LIAPI static bool hasContainer(Vec3 pos, int dim);
    LIAPI static Container* getContainer(Vec3 pos, int dim);

    //Item
    // The return value should be freed by the developer if it is no longer used
    LIAPI static ItemStack* getItemStackFromId(short itemId, int aux = 0);

    //Helper
    LIAPI static BlockSource* getBlockSource(int dimid);
    LIAPI static BlockSource* getBlockSource(Actor* actor);
    LIAPI static BlockPalette* getBlockPalette();
    LIAPI static Dimension* getDimension(class AutomaticID<class Dimension, int> a0);
    LIAPI static Actor* getDamageSourceEntity(ActorDamageSource* ads);
    LIAPI static void broadcastText(const string& text, TextType type);
    LIAPI static void broadcastTitle(const string& text, TitleType Type, int FadeInDuration, int RemainDuration, int FadeOutDuration);
    LIAPI static void sendPacketForAllPlayer(Packet& pkt);

    LIAPI static std::string getCurrentLevelName();
    LIAPI static std::string getCurrentLevelPath();
    LIAPI static int64_t createBossEvent();

 public:
    static void dummy() { ; }
    struct ServerCommandOrigin {
        void* myVTBL;
        void* UUID[2];
        ServerLevel* lvl;
        string Name;
        unsigned char Perm;
        static void* fake_vtbl[26];

        [[deprecated]]
        ServerCommandOrigin()
        {
            if (fake_vtbl[1] == nullptr) {
                memcpy(fake_vtbl, (void**)(SYM("??_7ServerCommandOrigin@@6B@")) - 1, sizeof(fake_vtbl));
                fake_vtbl[1] = (void*)dummy;
            }
            myVTBL = fake_vtbl + 1;
            Name = "Server";
            Perm = 4;
            lvl = Global<ServerLevel>;
        }
    };

    LIAPI static bool executeCommandAs(Player* player, const string& cmd);
    LIAPI static std::pair<bool, string> executeCommandEx(const string& cmd);
    LIAPI static bool executeCommand(const string& cmd);



    //For compatibility
    LIAPI static bool runcmdAs(Player* pl, const string& cmd)
    {
        return executeCommandAs(pl, cmd);
    }
    LIAPI static std::pair<bool, string> runcmdEx(const string& cmd)
    {
        return executeCommandEx(cmd);
    }
    LIAPI static bool runcmd(const string& cmd)
    {
        return executeCommand(cmd);
    }

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_LEVEL
public:
    class Level& operator=(class Level const &) = delete;
    Level(class Level const &) = delete;
    Level() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_LEVEL
    MCVAPI void _checkUserStorage();
    MCVAPI class StackRefResultT<struct EntityRefTraits> _clientHandleAddOwnedEntity(class EntityNetId);
    MCVAPI class StackRefResultT<struct EntityRefTraits> _clientHandleAddWeakRefEntity(class EntityNetId, class WeakRefT<struct EntityRefTraits>);
    MCVAPI void _clientHandleRemoveOwnedEntity(class EntityNetId);
    MCVAPI void _clientHandleRemoveWeakRefEntity(class EntityNetId);
    MCVAPI void _destroyEffect(class BlockPos const &, class Block const &, int);
    MCVAPI void _localPlayerChangedDimension();
    MCVAPI class Actor * addAutonomousEntity(class BlockSource &, class OwnerPtrT<struct EntityRefTraits>);
    MCVAPI void addBossEventListener(class BossEventListener *);
    MCVAPI void addBreakingItemParticleEffect(class Vec3 const &, enum ParticleType, struct TextureUVCoordinateSet const &, bool);
    MCVAPI void addChunkViewTracker(class std::weak_ptr<class ChunkViewSource>);
    MCVAPI class Actor * addDisplayEntity(class BlockSource &, class OwnerPtrT<struct EntityRefTraits>);
    MCVAPI class Actor * addEntity(class BlockSource &, class OwnerPtrT<struct EntityRefTraits>);
    MCVAPI class Actor * addGlobalEntity(class BlockSource &, class OwnerPtrT<struct EntityRefTraits>);
    MCVAPI void addListener(class LevelListener &);
    MCVAPI class Particle * addParticle(enum ParticleType, class Vec3 const &, class Vec3 const &, int, class CompoundTag const *, bool);
    MCVAPI void addParticleEffect(class HashedString const &, class Vec3 const &, class MolangVariableMap const &);
    MCVAPI void addTerrainParticleEffect(class BlockPos const &, class Block const &, class Vec3 const &, float, float, float);
    MCVAPI void addTerrainSlideEffect(class BlockPos const &, class Block const &, class Vec3 const &, float, float, float);
    MCVAPI void addTickingAreaList(class AutomaticID<class Dimension, int>, class std::shared_ptr<class TickingAreaList> const &);
    MCVAPI void addUser(class OwnerPtrT<struct EntityRefTraits>);
    MCVAPI void animateTick(class Actor &);
    MCVAPI void applyLiquidPhysicsToActor(class Actor *, enum MaterialType);
    MCVAPI bool areBossEventListenersReady();
    MCVAPI class Level * asLevel();
    MCVAPI void broadcastActorEvent(class Actor &, enum ActorEvent, int);
    MCVAPI void broadcastBossEvent(enum BossEventUpdateType);
    MCVAPI void broadcastBossEvent(enum BossEventUpdateType, struct ActorUniqueID const &, class BossEventPacket const &);
    MCVAPI void broadcastLevelEvent(enum LevelEvent, class CompoundTag const &, class UserEntityIdentifierComponent const *);
    MCVAPI void broadcastLevelEvent(enum LevelEvent, class Vec3 const &, int, class UserEntityIdentifierComponent const *);
    MCVAPI void broadcastLocalEvent(class BlockSource &, enum LevelEvent, class Vec3 const &, class Block const &);
    MCVAPI void broadcastLocalEvent(class BlockSource &, enum LevelEvent, class Vec3 const &, int);
    MCVAPI void broadcastSoundEvent(class BlockSource &, enum LevelSoundEvent, class Vec3 const &, class Block const &, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI void broadcastSoundEvent(class BlockSource &, enum LevelSoundEvent, class Vec3 const &, int, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI void broadcastSoundEvent(class Dimension &, enum LevelSoundEvent, class Vec3 const &, int, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI bool canUseSkin(class SerializedSkin const &, class NetworkIdentifier const &, class mce::UUID const &, std::string const &) const;
    MCVAPI void consolidateLevelChunkMetaData(class LevelChunk &);
    MCVAPI bool copyAndLockMap(struct ActorUniqueID, struct ActorUniqueID);
    MCVAPI int countUsersWithMatchingNetworkId(class NetworkIdentifier const &) const;
    MCVAPI class Dimension * createDimension(class AutomaticID<class Dimension, int>);
    MCVAPI class MapItemSavedData & createMapSavedData(struct ActorUniqueID const &, class BlockPos const &, class AutomaticID<class Dimension, int>, int);
    MCVAPI class MapItemSavedData & createMapSavedData(std::vector<struct ActorUniqueID> const &, class BlockPos const &, class AutomaticID<class Dimension, int>, int);
    MCVAPI void createPhotoStorage();
    MCVAPI void decrementTagCache(std::string const &, class TagRegistry<struct IDType<struct LevelTagIDType>, struct IDType<struct LevelTagSetIDType>> &);
    MCVAPI void denyEffect(class BlockSource &, class Vec3 const &);
    //MCVAPI bool destroyBlock(class BlockSource &, class BlockPos const &, bool);
    MCVAPI void digestServerBlockProperties(class StartGamePacket const &, unsigned int);
    MCVAPI void digestServerItemComponents(class ItemComponentPacket const &);
    MCVAPI void directTickEntities(class BlockSource &);
    MCVAPI void entityChangeDimension(class Actor &, class AutomaticID<class Dimension, int>, class std::optional<class Vec3>);
    MCVAPI struct ActorUniqueID expandMapByID(struct ActorUniqueID, bool);
    MCVAPI void explode(class BlockSource &, class Actor *, class Vec3 const &, float, bool, bool, float, bool);
    MCVAPI void explode(class Explosion &);
    MCVAPI bool extinguishFire(class BlockSource &, class BlockPos const &, unsigned char);
    MCVAPI class Actor * fetchEntity(struct ActorUniqueID, bool) const;
    MCVAPI std::unique_ptr<class Path> findPath(class Actor &, class Actor &, class NavigationComponent &);
    MCVAPI std::unique_ptr<class Path> findPath(class Actor &, int, int, int, class NavigationComponent &);
    MCVAPI class Player * findPlayer(class std::function<bool (class Player const &)>) const;
    MCVAPI class Player * findPlayer(class std::function<bool (class WeakEntityRef const &)>) const;
    MCVAPI void flushRunTimeLighting();
    MCVAPI void forEachDimension(class std::function<bool (class Dimension const &)>) const;
    MCVAPI void forEachDimension(class std::function<bool (class Dimension &)>);
    //MCVAPI void forEachPlayer(class std::function<bool (class Player const &)>) const;
    //MCVAPI void forEachPlayer(class std::function<bool (class Player &)>);
    MCVAPI void forEachUser(class std::function<bool (class EntityContext &)>) const;
    MCVAPI void forceFlushRemovedPlayers();
    MCVAPI void forceRemoveEntity(class Actor &, bool);
    MCVAPI std::vector<class WeakEntityRef> & getActiveAutonomousActors();
    MCVAPI int getActivePlayerCount() const;
    MCVAPI std::vector<class WeakEntityRef> const & getActiveUsers() const;
    MCVAPI int getActiveUsersCount() const;
    MCVAPI class ActorAnimationControllerGroup * getActorAnimationControllerGroup() const;
    MCVAPI class gsl::not_null<class Bedrock::NonOwnerPointer<class ActorAnimationGroup>> getActorAnimationGroup() const;
    MCVAPI class ActorEventCoordinator & getActorEventCoordinator();
    MCVAPI class ActorFactory const & getActorFactory() const;
    MCVAPI class ActorFactory & getActorFactory();
    MCVAPI class ActorInfoRegistry * getActorInfoRegistry();
    MCVAPI class PropertyGroupManager & getActorPropertyGroup() const;
    MCVAPI struct AdventureSettings & getAdventureSettings();
    MCVAPI class BehaviorFactory & getBehaviorFactory() const;
    MCVAPI class BehaviorTreeGroup & getBehaviorTreeGroup() const;
    MCVAPI class BiomeComponentFactory & getBiomeComponentFactory();
    MCVAPI class BiomeComponentFactory const & getBiomeComponentFactory() const;
    MCVAPI class BiomeRegistry const & getBiomeRegistry() const;
    MCVAPI class BiomeRegistry & getBiomeRegistry();
    MCVAPI class BlockComponentFactory & getBlockComponentFactory();
    MCVAPI class BlockComponentFactory const & getBlockComponentFactory() const;
    MCVAPI class BlockDefinitionGroup * getBlockDefinitions() const;
    MCVAPI class BlockEventCoordinator & getBlockEventCoordinator();
    //MCVAPI class BlockPalette const & getBlockPalette() const;
    //MCVAPI class BlockPalette & getBlockPalette();
    MCVAPI class BlockReducer * getBlockReducer() const;
    MCVAPI class std::weak_ptr<class BlockTypeRegistry> getBlockRegistry() const;
    MCVAPI unsigned int getChunkTickRange() const;
    MCVAPI class ClientPlayerEventCoordinator & getClientPlayerEventCoordinator();
    MCVAPI class ResourcePackManager * getClientResourcePackManager() const;
    MCVAPI std::vector<class ChunkPos> const & getClientTickingOffsets() const;
    MCVAPI struct Tick const getCurrentServerTick() const;
    MCVAPI struct Tick const & getCurrentTick() const;
    MCVAPI class Abilities & getDefaultAbilities();
    MCVAPI enum GameType getDefaultGameType() const;
    MCVAPI class BlockPos const & getDefaultSpawn() const;
    MCVAPI enum Difficulty getDifficulty() const;
    //MCVAPI class Dimension * getDimension(class AutomaticID<class Dimension, int>) const;
    MCVAPI class DimensionConversionData getDimensionConversionData() const;
    MCVAPI class std::optional<class DimensionDefinitionGroup> const getDimensionDefinitionGroup() const;
    MCVAPI class Factory<class Dimension, class Level &, class Scheduler &> const & getDimensionFactory() const;
    MCVAPI class Factory<class Dimension, class Level &, class Scheduler &> & getDimensionFactory();
    MCVAPI class std::optional<struct EducationLevelSettings> const & getEducationLevelSettings() const;
    MCVAPI std::vector<class OwnerPtrT<struct EntityRefTraits>> const & getEntities() const;
    MCVAPI class ActorDefinitionGroup * getEntityDefinitions() const;
    MCVAPI class StackRefResultT<struct EntityRegistryRefTraits> getEntityRegistry();
    MCVAPI class StackRefResultT<struct EntityRegistryConstRefTraits> getEntityRegistry() const;
    MCVAPI class EntitySystems & getEntitySystems();
    MCVAPI class IMinecraftEventing & getEventing();
    MCVAPI class FeatureRegistry & getFeatureRegistry();
    MCVAPI class FeatureRegistry const & getFeatureRegistry() const;
    MCVAPI class FeatureTypeFactory & getFeatureTypeFactory();
    MCVAPI class FeatureTypeFactory const & getFeatureTypeFactory() const;
    MCVAPI class GameRules const & getGameRules() const;
    MCVAPI class GameRules & getGameRules();
    MCVAPI class HitResult & getHitResult();
    MCVAPI class TaskGroup & getIOTasksGroup();
    MCVAPI std::string const & getImmersiveReaderString() const;
    MCVAPI class InternalComponentRegistry & getInternalComponentRegistry() const;
    MCVAPI class ItemEventCoordinator & getItemEventCoordinator();
    MCVAPI class std::weak_ptr<class ItemRegistry> getItemRegistry() const;
    MCVAPI class JigsawStructureRegistry const & getJigsawStructureRegistry() const;
    MCVAPI class JigsawStructureRegistry & getJigsawStructureRegistry();
    MCVAPI bool getLANBroadcast() const;
    MCVAPI bool getLANBroadcastIntent() const;
    MCVAPI class std::shared_ptr<class LevelChunkMetaDataDictionary> getLevelChunkMetaDataDictionary() const;
    MCVAPI class LevelData & getLevelData();
    MCVAPI class LevelData const & getLevelData() const;
    MCVAPI class WeakRefT<struct EntityRefTraits> getLevelEntity();
    MCVAPI class LevelEventCoordinator & getLevelEventCoordinator();
    MCVAPI std::string getLevelId() const;
    MCVAPI class LevelStorage const & getLevelStorage() const;
    MCVAPI class LevelStorage & getLevelStorage();
    MCVAPI class Factory<class BaseLightTextureImageBuilder, class Level &, class Scheduler &> & getLightTextureImageBuilderFactory();
    MCVAPI class Factory<class BaseLightTextureImageBuilder, class Level &, class Scheduler &> const & getLightTextureImageBuilderFactory() const;
    MCVAPI class HitResult & getLiquidHitResult();
    MCVAPI class LootTables & getLootTables();
    //MCVAPI class MapItemSavedData * getMapSavedData(class CompoundTag const &);
    //MCVAPI class MapItemSavedData * getMapSavedData(class CompoundTag const *);
    //MCVAPI class MapItemSavedData * getMapSavedData(struct ActorUniqueID);
    MCVAPI class Mob * getMob(struct ActorUniqueID) const;
    MCVAPI bool getMultiplayerGameIntent() const;
    MCVAPI class Bedrock::NonOwnerPointer<class NetEventCallback> getNetEventCallback() const;
    MCVAPI int getNetherScale() const;
    MCVAPI int getNewPlayerId() const;
    MCVAPI struct ActorUniqueID getNewUniqueID();
    MCVAPI class ActorRuntimeID getNextRuntimeID();
    MCVAPI int getNumRemotePlayers();
    MCVAPI std::vector<class OwnerPtrT<struct EntityRefTraits>> & getOwnedInactiveAutonomousActors();
    MCVAPI class PacketSender * getPacketSender() const;
    MCVAPI class StackRefResultT<struct SharePtrRefTraits<class PauseManager const>> getPauseManager() const;
    MCVAPI class StackRefResultT<struct SharePtrRefTraits<class PauseManager>> getPauseManager();
    MCVAPI class PhotoStorage & getPhotoStorage();
    MCVAPI enum Social::GamePublishSetting getPlatformBroadcastIntent() const;
    MCVAPI enum Social::GamePublishSetting getPlatformBroadcastMode() const;
    MCVAPI class Player * getPlatformPlayer(std::string const &) const;
    //MCVAPI class Player * getPlayer(std::string const &) const;
    //MCVAPI class Player * getPlayer(class mce::UUID const &) const;
    //MCVAPI class Player * getPlayer(struct ActorUniqueID) const;
    MCVAPI class Abilities * getPlayerAbilities(struct ActorUniqueID const &);
    MCVAPI class Player * getPlayerByXuid(std::string const &) const;
    MCVAPI class mce::Color getPlayerColor(class Player const &) const;
    MCVAPI class Player * getPlayerFromServerId(std::string const &) const;
    MCVAPI class Player * getPlayerFromUnknownIdentifier(std::string const &) const;
    MCVAPI class std::unordered_map<class mce::UUID, class PlayerListEntry, struct std::hash<class mce::UUID>, struct std::equal_to<class mce::UUID>, class std::allocator<struct std::pair<class mce::UUID const, class PlayerListEntry>>> & getPlayerList();
    MCVAPI class std::unordered_map<class mce::UUID, class PlayerListEntry, struct std::hash<class mce::UUID>, struct std::equal_to<class mce::UUID>, class std::allocator<struct std::pair<class mce::UUID const, class PlayerListEntry>>> const & getPlayerList() const;
    MCVAPI struct PlayerMovementSettings const & getPlayerMovementSettings() const;
    MCVAPI std::string getPlayerNames();
    MCVAPI std::string const & getPlayerPlatformOnlineId(class mce::UUID const &) const;
    MCVAPI std::string const & getPlayerXUID(class mce::UUID const &) const;
    MCVAPI class PortalForcer & getPortalForcer();
    //MCVAPI class PositionTrackingDB::PositionTrackingDBClient * getPositionTrackerDBClient() const;
    //MCVAPI class PositionTrackingDB::PositionTrackingDBServer * getPositionTrackerDBServer() const;
    MCVAPI class Player * getPrimaryLocalPlayer() const;
    MCVAPI class ProjectileFactory & getProjectileFactory() const;
    MCVAPI class Random & getRandom() const;
    MCVAPI class Player * getRandomPlayer();
    MCVAPI class Recipes & getRecipes() const;
    MCVAPI class BlockLegacy const & getRegisteredBorderBlock() const;
    MCVAPI class PlayerEventCoordinator & getRemotePlayerEventCoordinator();
    MCVAPI std::vector<class Actor *> getRuntimeActorList() const;
    MCVAPI class Actor * getRuntimeEntity(class ActorRuntimeID, bool) const;
    MCVAPI class Player * getRuntimePlayer(class ActorRuntimeID) const;
    MCVAPI class SavedDataStorage & getSavedData() const;
    MCVAPI class Scoreboard & getScoreboard();
    MCVAPI class Core::PathBuffer<std::string> getScreenshotsFolder() const;
    MCVAPI unsigned int getSeed();
    MCVAPI class ServerNetworkEventCoordinator & getServerNetworkEventCoordinator();
    MCVAPI class ServerPlayerEventCoordinator & getServerPlayerEventCoordinator();
    MCVAPI class ResourcePackManager * getServerResourcePackManager() const;
    MCVAPI class BlockPos const & getSharedSpawnPos() const;
    MCVAPI bool getSimPaused();
    MCVAPI class gsl::not_null<class Bedrock::NonOwnerPointer<class SoundPlayerInterface>> getSoundPlayer() const;
    MCVAPI class SpawnGroupRegistry const * getSpawnGroupRegistry() const;
    MCVAPI class ActorSpawnRuleGroup const * getSpawnRules() const;
    MCVAPI class ActorSpawnRuleGroup * getSpawnRulesMutable() const;
    MCVAPI struct SpawnSettings const & getSpawnSettings() const;
    MCVAPI unsigned int getSpawnableTickedMobCountPrevious() const;
    MCVAPI class Spawner & getSpawner() const;
    MCVAPI float getSpecialMultiplier(class AutomaticID<class Dimension, int>) const;
    MCVAPI class gsl::not_null<class Bedrock::NonOwnerPointer<class StructureManager>> const getStructureManager() const;
    MCVAPI class gsl::not_null<class Bedrock::NonOwnerPointer<class StructureManager>> getStructureManager();
    MCVAPI class SubChunkRequestManager * getSubChunkRequestManager();
    MCVAPI class SurfaceBuilderRegistry const & getSurfaceBuilderRegistry() const;
    MCVAPI class SurfaceBuilderRegistry & getSurfaceBuilderRegistry();
    MCVAPI class TaskGroup & getSyncTasksGroup();
    MCVAPI class TagRegistry<struct IDType<struct LevelTagIDType>, struct IDType<struct LevelTagSetIDType>> & getTagRegistry();
    MCVAPI bool getTearingDown() const;
    MCVAPI class Random & getThreadRandom() const;
    MCVAPI class ITickingArea * getTickingArea(class mce::UUID const &) const;
    MCVAPI class TickingAreasManager & getTickingAreasMgr();
    MCVAPI std::vector<class ChunkPos> const & getTickingOffsets() const;
    MCVAPI int getTime() const;
    MCVAPI class TradeTables * getTradeTables();
    MCVAPI class IUnknownBlockTypeRegistry & getUnknownBlockTypeRegistry();
    MCVAPI int getUserCount() const;
    MCVAPI std::vector<class OwnerPtrT<struct EntityRefTraits>> const & getUsers() const;
    MCVAPI std::vector<class OwnerPtrT<struct EntityRefTraits>> & getUsers();
    //MCVAPI enum Social::GamePublishSetting getXBLBroadcastIntent() const;
    //MCVAPI enum Social::GamePublishSetting getXBLBroadcastMode() const;
    MCVAPI void handleLevelEvent(enum LevelEvent, class CompoundTag const &);
    MCVAPI void handleLevelEvent(enum LevelEvent, class Vec3 const &, int);
    MCVAPI void handleSoundEvent(std::string const &, class Vec3 const &, float, float);
    MCVAPI void handleSoundEvent(enum LevelSoundEvent, class Vec3 const &, int, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI void handleStopAllSounds();
    MCVAPI void handleStopSoundEvent(std::string const &);
    MCVAPI bool hasCommandsEnabled() const;
    MCVAPI bool hasLevelStorage() const;
    MCVAPI bool hasPlatformBroadcast() const;
    MCVAPI bool hasPlatformBroadcastIntent() const;
    MCVAPI bool hasStartWithMapEnabled() const;
    MCVAPI bool hasXBLBroadcast() const;
    MCVAPI bool hasXBLBroadcastIntent() const;
    MCVAPI void incrementSpawnableTickedMob();
    MCVAPI void incrementTagCache(std::string const &, class TagRegistry<struct IDType<struct LevelTagIDType>, struct IDType<struct LevelTagSetIDType>> &);
    MCVAPI bool initialize(std::string const &, class LevelSettings const &, class LevelData *, class Experiments const &, std::string const *);
    MCVAPI void initializeBlockDefinitionGroup();
    MCVAPI void initializeLevelChunkMetaData(class LevelChunk &);
    MCVAPI bool isClientSide() const;
    MCVAPI bool isEdu() const;
    MCVAPI bool isExporting() const;
    MCVAPI bool isLeaveGameDone();
    MCVAPI bool isMultiplayerGame() const;
    MCVAPI bool isPlayerSuspended(class Player &) const;
    MCVAPI void levelCleanupQueueEntityRemoval(class OwnerPtrT<struct EntityRefTraits>, bool);
    MCVAPI void loadBlockDefinitionGroup(class Experiments const &);
    MCVAPI void loadFunctionManager();
    MCVAPI void moveActiveAutonomousActorToInactive(class Actor &, class LevelChunk *);
    MCVAPI void notifySubChunkRequestManager(class SubChunkPacket const &);
    MCVAPI void onChunkDiscarded(class LevelChunk &);
    MCVAPI void onChunkLoaded(class ChunkSource &, class LevelChunk &);
    MCVAPI void onChunkReload(struct Bounds const &);
    MCVAPI void onChunkReloaded(class ChunkSource &, class LevelChunk &);
    MCVAPI void onPlayerDeath(class Player &, class ActorDamageSource const &);
    MCVAPI void onSourceCreated(class BlockSource &);
    MCVAPI void onSourceDestroyed(class BlockSource &);
    MCVAPI void onSubChunkLoaded(class ChunkSource &, class LevelChunk &, short);
    MCVAPI void playSound(enum LevelSoundEvent, class Vec3 const &, int, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI void playSound(class BlockSource &, enum LevelSoundEvent, class Vec3 const &, int, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI void playSound(class AutomaticID<class Dimension, int>, enum LevelSoundEvent, class Vec3 const &, int, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI void playSound(enum LevelSoundEvent, class Vec3 const &, float, float);
    MCVAPI void playSynchronizedSound(class BlockSource &, enum LevelSoundEvent, class Vec3 const &, class Block const &, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI void playSynchronizedSound(class BlockSource &, enum LevelSoundEvent, class Vec3 const &, int, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI void playSynchronizedSound(class Dimension &, enum LevelSoundEvent, class Vec3 const &, int, struct ActorDefinitionIdentifier const &, bool, bool);
    MCVAPI void potionSplash(class Vec3 const &, class mce::Color const &, bool);
    MCVAPI void pruneChunkViewTrackers();
    MCVAPI void queueEntityDestruction(class OwnerPtrT<struct EntityRefTraits>, bool);
    MCVAPI void registerEntity(class OwnerPtrT<struct EntityRefTraits>);
    MCVAPI void registerTemporaryPointer(class _TickPtr &);
    MCVAPI class OwnerPtrT<struct EntityRefTraits> removeActorAndTakeEntity(class WeakEntityRef, bool);
    MCVAPI void removeAllNonPlayerEntities(struct ActorUniqueID);
    MCVAPI void removeBossEventListener(class BossEventListener *);
    MCVAPI void removeDisplayEntity(class WeakEntityRef);
    MCVAPI class OwnerPtrT<struct EntityRefTraits> removeEntity(class Actor &);
    MCVAPI class OwnerPtrT<struct EntityRefTraits> removeEntity(class WeakEntityRef);
    MCVAPI bool removeEntityIfExists(class Actor *);
    MCVAPI void removeEntityReferences(class Actor &, bool);
    MCVAPI void removeListener(class LevelListener &);
    MCVAPI void requestMapInfo(struct ActorUniqueID, bool);
    MCVAPI void requestPlayerChangeDimension(class Player &, std::unique_ptr<class ChangeDimensionRequest>);
    MCVAPI class std::shared_ptr<void *> requestTimedStorageDeferment();
    MCVAPI void resumePlayer(class Player &);
    MCVAPI void runCommand(class Command &, class CommandOrigin &, enum CommandOriginSystem);
    MCVAPI void runCommand(class HashedString const &, class CommandOrigin &, enum CommandOriginSystem, enum CurrentCmdVersion);
    MCVAPI void save();
    MCVAPI void saveAdditionalData();
    MCVAPI void saveBiomeData();
    MCVAPI void saveDirtyChunks();
    MCVAPI void saveEducationLevelSettings();
    MCVAPI void saveGameData();
    MCVAPI void saveLevelData();
    MCVAPI void savePlayer(class Player &);
    MCVAPI void savePlayers();
    MCVAPI void saveVillages();
    MCVAPI void sendAllPlayerAbilities(class Player const &);
    MCVAPI void sendServerLegacyParticle(enum ParticleType, class Vec3 const &, class Vec3 const &, int);
    MCVAPI void setActorEventCoordinator(std::unique_ptr<class ActorEventCoordinator> &&);
    MCVAPI void setBlockEventCoordinator(std::unique_ptr<class BlockEventCoordinator> &&);
    MCVAPI void setClientPlayerEventCoordinator(std::unique_ptr<class ClientPlayerEventCoordinator> &&);
    MCVAPI void setCommandsEnabled(bool);
    MCVAPI void setDefaultGameType(enum GameType);
    MCVAPI void setDefaultSpawn(class BlockPos const &);
    MCVAPI void setDifficulty(enum Difficulty);
    MCVAPI void setEducationLevelSettings(struct EducationLevelSettings);
    MCVAPI void setFinishedInitializing();
    MCVAPI void setHasLockedBehaviorPack(bool);
    MCVAPI void setHasLockedResourcePack(bool);
    MCVAPI void setImmersiveReaderString(std::string);
    MCVAPI void setIsExporting(bool);
    MCVAPI void setItemEventCoordinator(std::unique_ptr<class ItemEventCoordinator> &&);
    MCVAPI void setLANBroadcast(bool);
    MCVAPI void setLANBroadcastIntent(bool);
    MCVAPI void setLevelId(std::string);
    MCVAPI void setMsaGamertagsOnly(bool);
    MCVAPI void setMultiplayerGame(bool);
    MCVAPI void setMultiplayerGameIntent(bool);
    MCVAPI void setNetEventCallback(class Bedrock::NonOwnerPointer<class NetEventCallback>);
    MCVAPI void setPacketSender(class PacketSender *);
    //MCVAPI void setPlatformBroadcastIntent(enum Social::GamePublishSetting);
    //MCVAPI void setPlatformBroadcastMode(enum Social::GamePublishSetting);
    MCVAPI void setPlayerAbilities(struct ActorUniqueID const &, class Abilities);
    MCVAPI void setPlayerMovementSettings(struct PlayerMovementSettings const &);
    MCVAPI void setRemotePlayerEventCoordinator(std::unique_ptr<class PlayerEventCoordinator> &&);
    MCVAPI void setServerNetworkEventCoordinator(std::unique_ptr<class ServerNetworkEventCoordinator> &&);
    MCVAPI void setServerPlayerEventCoordinator(std::unique_ptr<class ServerPlayerEventCoordinator> &&);
    MCVAPI void setSimPaused(bool);
    MCVAPI void setSpawnSettings(struct SpawnSettings const &);
    MCVAPI void setTime(int);
    MCVAPI void setWorldTemplateOptionsUnlocked();
    MCVAPI void setXBLBroadcastIntent(enum Social::GamePublishSetting);
    MCVAPI void setXBLBroadcastMode(enum Social::GamePublishSetting);
    //MCVAPI void spawnParticleEffect(std::string const &, class Vec3 const &, class Dimension *);
    MCVAPI void startLeaveGame();
    MCVAPI void suspendAndSave();
    MCVAPI void suspendPlayer(class Player &);
    MCVAPI class OwnerPtrT<struct EntityRefTraits> takeEntity(class WeakEntityRef, class LevelChunk *);
    //MCVAPI void takePicture(class cg::ImageBuffer &, class Actor *, class Actor *, struct ScreenshotOptions &);
    MCVAPI void tick();
    MCVAPI void tickEntities();
    MCVAPI void tickEntitySystems();
    MCVAPI void unregisterTemporaryPointer(class _TickPtr &);
    MCVAPI void updateSleepingPlayerList();
    MCVAPI void updateWeather(float, int, float, int);
    MCVAPI void upgradeStorageVersion(enum StorageVersion);
    MCVAPI bool useMsaGamertagsOnly() const;
    MCVAPI void waitAsyncSuspendWork();
    MCVAPI ~Level();
#endif
    MCAPI Level(class gsl::not_null<class Bedrock::NonOwnerPointer<class SoundPlayerInterface>> const &, std::unique_ptr<class LevelStorage>, std::unique_ptr<class LevelLooseFileStorage>, class IMinecraftEventing &, bool, unsigned char, class Scheduler &, class gsl::not_null<class Bedrock::NonOwnerPointer<class StructureManager>>, class ResourcePackManager &, class gsl::not_null<class Bedrock::NonOwnerPointer<class IEntityRegistryOwner>> const &, class WeakRefT<struct EntityRefTraits>, std::unique_ptr<class BlockComponentFactory>, std::unique_ptr<class BlockDefinitionGroup>, class std::weak_ptr<class ItemRegistry>, class std::weak_ptr<class BlockTypeRegistry>, class std::optional<class DimensionDefinitionGroup>);
    MCAPI struct AdventureSettings const & getAdventureSettings() const;
    MCAPI struct PlayerCapabilities::ISharedController const & getCapabilities() const;
    MCAPI class std::optional<struct DimensionDefinitionGroup::DimensionDefinition> getDimensionDefinition(std::string const &) const;
    MCAPI class LevelSeed64 getLevelSeed64() const;
    MCAPI class NpcDialogueStorage * getNpcDialogueStorage();
    MCAPI double getTickDeltaTime() const;
    MCAPI bool isChunkInTickRange(class LevelChunk const &, class std::optional<int>) const;
    MCAPI enum NodeType isFree(class NavigationComponent &, class Actor &, class BlockPos const &, class BlockPos const &, class BlockPos const &, enum CanJumpIntoNode);
    MCAPI void sendPerformanceTelemetry();
    MCAPI void setPerformanceTelemetryPeriodicCallback(class std::function<void (void)>);
    MCAPI bool use3DBiomeMaps() const;
    MCAPI static float const AVERAGE_GAME_TICKS_PER_RANDOM_TICK_PER_BLOCK;
    MCAPI static float const AVERAGE_RANDOM_TICKS_PER_BLOCK_PER_GAME_DAY;
    MCAPI static float const AVERAGE_RANDOM_TICKS_PER_BLOCK_PER_MINUTE;
    MCAPI static float const RANDOM_TICKS_PER_TICK_PER_SUBCHUNK;
    MCAPI static void addLevelComponents(class EntityContext &, class IRandom &, bool);
    MCAPI static void addSideBySideLevelComponents(class EntityContext &, bool);
    MCAPI static unsigned int createRandomSeed();
    MCAPI static bool isUsableLevel(class ILevel const &);
    MCAPI static class LevelSeed64 parseLevelSeed64(std::string const &);

protected:
    MCAPI class ServerLevelEventCoordinator & _getServerLevelEventCoordinator();

private:
    MCAPI void _cleanupDisconnectedPlayers();
    MCAPI class MapItemSavedData & _createMapSavedData(struct ActorUniqueID const &);
    MCAPI enum CrashDumpLogStringID _getCrashDumpLogCategory();
    MCAPI std::string _getValidatedPlayerName(std::string const &);
    MCAPI void _handleChangeDimensionRequests();
    MCAPI void _handlePlayerSuspension();
    MCAPI void _loadAutonomousEntities();
    MCAPI void _loadBiomeData();
    MCAPI class MapItemSavedData * _loadMapData(struct ActorUniqueID const &);
    MCAPI bool _playerChangeDimension(class Player *, class ChangeDimensionRequest &);
    MCAPI void _saveAutonomousEntities();
    MCAPI void _saveSomeChunks();
    MCAPI void _syncTime(int);

};