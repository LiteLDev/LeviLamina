// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class EnchantWithLevelsFunction {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ENCHANTWITHLEVELSFUNCTION
public:
    class EnchantWithLevelsFunction& operator=(class EnchantWithLevelsFunction const &) = delete;
    EnchantWithLevelsFunction(class EnchantWithLevelsFunction const &) = delete;
    EnchantWithLevelsFunction() = delete;
#endif

public:
    /*
    inline int apply(class ItemInstance & a0, class Random & a1, struct Trade const & a2, class LootTableContext & a3){
        int (EnchantWithLevelsFunction::*rv)(class ItemInstance &, class Random &, struct Trade const &, class LootTableContext &);
        *((void**)&rv) = dlsym("?apply@EnchantWithLevelsFunction@@UEAAHAEAVItemInstance@@AEAVRandom@@AEBUTrade@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemInstance &>(a0), std::forward<class Random &>(a1), std::forward<struct Trade const &>(a2), std::forward<class LootTableContext &>(a3));
    }
    inline int apply(class ItemStack & a0, class Random & a1, struct Trade const & a2, class LootTableContext & a3){
        int (EnchantWithLevelsFunction::*rv)(class ItemStack &, class Random &, struct Trade const &, class LootTableContext &);
        *((void**)&rv) = dlsym("?apply@EnchantWithLevelsFunction@@UEAAHAEAVItemStack@@AEAVRandom@@AEBUTrade@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemStack &>(a0), std::forward<class Random &>(a1), std::forward<struct Trade const &>(a2), std::forward<class LootTableContext &>(a3));
    }
    inline void apply(class ItemInstance & a0, class Random & a1, class LootTableContext & a2){
        void (EnchantWithLevelsFunction::*rv)(class ItemInstance &, class Random &, class LootTableContext &);
        *((void**)&rv) = dlsym("?apply@EnchantWithLevelsFunction@@UEAAXAEAVItemInstance@@AEAVRandom@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemInstance &>(a0), std::forward<class Random &>(a1), std::forward<class LootTableContext &>(a2));
    }
    inline void apply(class ItemStack & a0, class Random & a1, class LootTableContext & a2){
        void (EnchantWithLevelsFunction::*rv)(class ItemStack &, class Random &, class LootTableContext &);
        *((void**)&rv) = dlsym("?apply@EnchantWithLevelsFunction@@UEAAXAEAVItemStack@@AEAVRandom@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemStack &>(a0), std::forward<class Random &>(a1), std::forward<class LootTableContext &>(a2));
    }
    */
    MCAPI static std::unique_ptr<class LootItemFunction> deserialize(class Json::Value, std::vector<std::unique_ptr<class LootItemCondition>> &);

protected:

private:

};