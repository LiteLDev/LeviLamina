// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Player.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "Player.hpp"

#undef BEFORE_EXTRA

class ServerPlayer : public Player {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERPLAYER
public:
    class ServerPlayer& operator=(class ServerPlayer const &) = delete;
    ServerPlayer(class ServerPlayer const &) = delete;
    ServerPlayer() = delete;
#endif

public:
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*12*/ virtual void _serverInitItemStackIds();
    /*14*/ virtual ~ServerPlayer();
    /*40*/ virtual void __unk_vfn_40();
    /*48*/ virtual void normalTick();
    /*61*/ virtual void __unk_vfn_61();
    /*68*/ virtual void __unk_vfn_68();
    /*82*/ virtual void __unk_vfn_82();
    /*88*/ virtual void __unk_vfn_88();
    /*95*/ virtual void __unk_vfn_95();
    /*98*/ virtual void __unk_vfn_98();
    /*105*/ virtual void __unk_vfn_105();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*109*/ virtual void __unk_vfn_109();
    /*114*/ virtual bool isValidTarget(class Actor *) const;
    /*141*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*152*/ virtual void setArmor(enum ArmorSlot, class ItemStack const &);
    /*162*/ virtual void setOffhandSlot(class ItemStack const &);
    /*167*/ virtual bool load(class CompoundTag const &, class DataLoadHelper &);
    /*180*/ virtual bool canChangeDimensions() const;
    /*181*/ virtual void __unk_vfn_181();
    /*182*/ virtual void changeDimension(class AutomaticID<class Dimension, int>, bool);
    /*183*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*184*/ virtual void checkFallDamage(float, bool);
    /*186*/ virtual void handleFallDistanceOnServer(float, float, bool);
    /*195*/ virtual void __unk_vfn_195();
    /*213*/ virtual void onEffectAdded(class MobEffectInstance &);
    /*214*/ virtual void onEffectUpdated(class MobEffectInstance &);
    /*215*/ virtual void onEffectRemoved(class MobEffectInstance &);
    /*220*/ virtual void __unk_vfn_220();
    /*221*/ virtual void __unk_vfn_221();
    /*246*/ virtual void __unk_vfn_246();
    /*249*/ virtual void __unk_vfn_249();
    /*251*/ virtual void die(class ActorDamageSource const &);
    /*261*/ virtual void __unk_vfn_261();
    /*269*/ virtual void __unk_vfn_269();
    /*278*/ virtual void __unk_vfn_278();
    /*279*/ virtual void knockback(class Actor *, int, float, float, float, float, float);
    /*294*/ virtual void aiStep();
    /*307*/ virtual void __unk_vfn_307();
    /*311*/ virtual void __unk_vfn_311();
    /*319*/ virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4> const &);
    /*320*/ virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    /*321*/ virtual void sendArmorDamage(class std::bitset<4> const &);
    /*322*/ virtual void sendArmor(class std::bitset<4> const &);
    /*332*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*333*/ virtual void sendInventory(bool);
    /*345*/ virtual void __unk_vfn_345();
    /*359*/ virtual void __unk_vfn_359();
    /*361*/ virtual void prepareRegion(class ChunkSource &);
    /*362*/ virtual void destroyRegion();
    /*363*/ virtual void suspendRegion();
    /*364*/ virtual void resendAllChunks();
    /*367*/ virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    /*368*/ virtual void tickWorld(struct Tick const &);
    /*369*/ virtual void __unk_vfn_369();
    /*371*/ virtual void moveView();
    /*373*/ virtual void checkMovementStats(class Vec3 const &);
    /*374*/ virtual void __unk_vfn_374();
    /*375*/ virtual void __unk_vfn_375();
    /*377*/ virtual void __unk_vfn_377();
    /*378*/ virtual void __unk_vfn_378();
    /*381*/ virtual void setPermissions(enum CommandPermissionLevel);
    /*384*/ virtual void __unk_vfn_384();
    /*385*/ virtual void __unk_vfn_385();
    /*386*/ virtual void openTrading(struct ActorUniqueID const &, bool);
    /*388*/ virtual void __unk_vfn_388();
    /*389*/ virtual void openNpcInteractScreen(class std::shared_ptr<struct INpcDialogueData>);
    /*390*/ virtual void openInventory();
    /*391*/ virtual void __unk_vfn_391();
    /*392*/ virtual void __unk_vfn_392();
    /*393*/ virtual void displayTextObjectMessage(class TextObjectRoot const &, std::string const &, std::string const &);
    /*394*/ virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const &, std::string const &, std::string const &);
    /*395*/ virtual void displayWhisperMessage(std::string const &, std::string const &, std::string const &, std::string const &);
    /*397*/ virtual void stopSleepInBed(bool, bool);
    /*401*/ virtual void __unk_vfn_401();
    /*402*/ virtual void __unk_vfn_402();
    /*403*/ virtual bool isHostingPlayer() const;
    /*404*/ virtual bool isLoading() const;
    /*405*/ virtual bool isPlayerInitialized() const;
    /*406*/ virtual void __unk_vfn_406();
    /*409*/ virtual void setPlayerGameType(enum GameType);
    /*413*/ virtual void __unk_vfn_413();
    /*417*/ virtual void setContainerData(class IContainerManager &, int, int);
    /*418*/ virtual void slotChanged(class IContainerManager &, class Container &, int, class ItemStack const &, class ItemStack const &, bool);
    /*420*/ virtual void refreshContainer(class IContainerManager &);
    /*423*/ virtual bool is2DPositionRelevant(class AutomaticID<class Dimension, int>, class BlockPos const &);
    /*424*/ virtual bool isActorRelevant(class Actor const &);
    /*425*/ virtual bool isTeacher() const;
    /*426*/ virtual void onSuspension();
    /*427*/ virtual void onLinkedSlotsChanged();
    /*433*/ virtual void sendInventoryTransaction(class InventoryTransaction const &) const;
    /*434*/ virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const;
    /*435*/ virtual void sendNetworkPacket(class Packet &) const;
    /*436*/ virtual class PlayerEventCoordinator & getPlayerEventCoordinator();
    /*437*/ virtual class MoveInputHandler * getMoveInputHandler() const;
    /*438*/ virtual enum InputMode getInputMode() const;
    /*439*/ virtual enum ClientPlayMode getPlayMode() const;
    /*440*/ virtual void reportMovementTelemetry(enum MovementEventType);
    /*441*/ virtual void __unk_vfn_441();
    /*446*/ virtual int _getSpawnChunkLimit() const;
    /*447*/ virtual void _updateChunkPublisherView(class Vec3 const &, float);
    /*
    inline void frameUpdate(class FrameUpdateContextBase & a0){
        void (ServerPlayer::*rv)(class FrameUpdateContextBase &);
        *((void**)&rv) = dlsym("?frameUpdate@ServerPlayer@@UEAAXAEAVFrameUpdateContextBase@@@Z");
        return (this->*rv)(std::forward<class FrameUpdateContextBase &>(a0));
    }
    inline void openPortfolio(){
        void (ServerPlayer::*rv)();
        *((void**)&rv) = dlsym("?openPortfolio@ServerPlayer@@UEAAXXZ");
        return (this->*rv)();
    }
    */
    MCAPI ServerPlayer(class Level &, class PacketSender &, class NetworkHandler &, class ClientBlobCache::Server::ActiveTransfersManager &, enum GameType, class NetworkIdentifier const &, unsigned char, class std::function<void (class ServerPlayer &)>, class mce::UUID, std::string const &, std::unique_ptr<class Certificate>, int, bool, class EntityContext &);
    MCAPI void checkCheating(class Vec3 const &);
    MCAPI void disconnect();
    MCAPI void doDeleteContainerManager(bool);
    MCAPI class ItemStackNetManagerServer & getItemStackNetManagerServer();
    MCAPI class ServerMoveInputHandler * getServerMoveInputHandler();
    MCAPI void handleActorPickRequestOnServer(class Actor &, bool, bool);
    MCAPI void handleBlockPickRequestOnServer(class BlockPos const &, bool);
    MCAPI enum ContainerID openUnmanagedContainer();
    MCAPI void postLoad(bool);
    MCAPI void selectItem(class ItemStack const &);
    MCAPI void sendMobEffectPackets();
    MCAPI void setClientChunkRadius(unsigned int);
    MCAPI void setInputMode(enum InputMode const &);
    MCAPI void setLocalPlayerAsInitialized();
    MCAPI void setPlayMode(enum ClientPlayMode const &);
    MCAPI void setPlayerInput(float, float, bool, bool);
    MCAPI void setSyncTimeIfClientServerPositionMatches(class Vec3 const &);
    MCAPI void triggerRespawnFromCompletingTheEnd();
    MCAPI static class ServerPlayer * tryGetFromEntity(class EntityContext &, bool);

protected:

private:
    MCAPI void _logCDEvent(enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID);
    MCAPI enum ContainerID _nextContainerCounter();
    MCAPI void _removeNearbyEntities();
    MCAPI void _scanForNearbyActors();
    MCAPI void _setContainerManager(class std::shared_ptr<class IContainerManager>);
    MCAPI void _updateNearbyActors();

};