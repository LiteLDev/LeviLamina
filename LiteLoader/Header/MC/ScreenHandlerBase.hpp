// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ScreenHandlerBase {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCREENHANDLERBASE
public:
    class ScreenHandlerBase& operator=(class ScreenHandlerBase const &) = delete;
    ScreenHandlerBase(class ScreenHandlerBase const &) = delete;
    ScreenHandlerBase() = delete;
#endif

public:
    /*0*/ virtual ~ScreenHandlerBase();
    /*1*/ virtual enum ItemStackNetResult handleAction(class ItemStackRequestAction const &);
    /*2*/ virtual enum ItemStackNetResult endRequest();
    /*
    inline void postRequest(bool a0){
        void (ScreenHandlerBase::*rv)(bool);
        *((void**)&rv) = dlsym("?postRequest@ScreenHandlerBase@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline void endRequestBatch(){
        void (ScreenHandlerBase::*rv)();
        *((void**)&rv) = dlsym("?endRequestBatch@ScreenHandlerBase@@UEAAXXZ");
        return (this->*rv)();
    }
    */
    MCAPI ScreenHandlerBase(class ItemStackRequestActionHandler &);

protected:
    MCAPI class std::shared_ptr<class SimpleSparseContainer> _tryGetSparseContainer(enum ContainerEnumName);

private:

};