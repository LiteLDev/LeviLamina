// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockLegacy.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class DiodeBlock : public BlockLegacy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_DIODEBLOCK
public:
    class DiodeBlock& operator=(class DiodeBlock const &) = delete;
    DiodeBlock(class DiodeBlock const &) = delete;
    DiodeBlock() = delete;
#endif

public:
    /*0*/ virtual ~DiodeBlock();
    /*19*/ virtual void __unk_vfn_19();
    /*30*/ virtual void __unk_vfn_30();
    /*31*/ virtual void __unk_vfn_31();
    /*32*/ virtual void __unk_vfn_32();
    /*34*/ virtual void __unk_vfn_34();
    /*35*/ virtual void __unk_vfn_35();
    /*36*/ virtual void __unk_vfn_36();
    /*37*/ virtual void __unk_vfn_37();
    /*38*/ virtual void __unk_vfn_38();
    /*39*/ virtual void __unk_vfn_39();
    /*40*/ virtual void __unk_vfn_40();
    /*41*/ virtual void __unk_vfn_41();
    /*43*/ virtual void __unk_vfn_43();
    /*44*/ virtual void __unk_vfn_44();
    /*45*/ virtual void __unk_vfn_45();
    /*46*/ virtual void __unk_vfn_46();
    /*47*/ virtual void __unk_vfn_47();
    /*48*/ virtual void __unk_vfn_48();
    /*50*/ virtual bool isSignalSource() const;
    /*57*/ virtual int getDirectSignal(class BlockSource &, class BlockPos const &, int) const;
    /*58*/ virtual void __unk_vfn_58();
    /*59*/ virtual void __unk_vfn_59();
    /*70*/ virtual void onRedstoneUpdate(class BlockSource &, class BlockPos const &, int, bool) const;
    /*72*/ virtual void __unk_vfn_72();
    /*79*/ virtual void __unk_vfn_79();
    /*89*/ virtual bool mayPlace(class BlockSource &, class BlockPos const &) const;
    /*97*/ virtual void neighborChanged(class BlockSource &, class BlockPos const &, class BlockPos const &) const;
    /*104*/ virtual void __unk_vfn_104();
    /*105*/ virtual class Block const & getPlacementBlock(class Actor &, class BlockPos const &, unsigned char, class Vec3 const &, int) const;
    /*124*/ virtual void __unk_vfn_124();
    /*126*/ virtual void __unk_vfn_126();
    /*127*/ virtual void __unk_vfn_127();
    /*132*/ virtual void __unk_vfn_132();
    /*147*/ virtual int getVariant(class Block const &) const;
    /*148*/ virtual void __unk_vfn_148();
    /*165*/ virtual void __unk_vfn_165();
    /*179*/ virtual void __unk_vfn_179();
    /*180*/ virtual void __unk_vfn_180();
    /*187*/ virtual void __unk_vfn_187();
    /*190*/ virtual bool canSurvive(class BlockSource &, class BlockPos const &) const;
    /*199*/ virtual void __unk_vfn_199();
    /*204*/ virtual bool isLocked(class BlockSource &, class BlockPos const &) const;
    /*205*/ virtual bool isSameDiode(class Block const &) const;
    /*206*/ virtual bool shouldPrioritize(class BlockSource &, class BlockPos const &) const;
    /*207*/ virtual bool isOn() const;
    /*208*/ virtual bool shouldTurnOn(class BlockSource &, class BlockPos const &) const;
    /*209*/ virtual int getInputSignal(class BlockSource &, class BlockPos const &) const;
    /*210*/ virtual bool isAlternateInput(class Block const &) const;
    /*211*/ virtual int getAlternateSignal(class BlockSource &, class BlockPos const &) const;
    /*212*/ virtual int getOutputSignal(class Block const &) const;
    /*213*/ virtual int getTurnOffDelay(class Block const &) const;
    /*
    inline bool canSpawnOn() const{
        bool (DiodeBlock::*rv)() const;
        *((void**)&rv) = dlsym("?canSpawnOn@DiodeBlock@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline int getSignal(class BlockSource & a0, class BlockPos const & a1, int a2) const{
        int (DiodeBlock::*rv)(class BlockSource &, class BlockPos const &, int) const;
        *((void**)&rv) = dlsym("?getSignal@DiodeBlock@@UEBAHAEAVBlockSource@@AEBVBlockPos@@H@Z");
        return (this->*rv)(std::forward<class BlockSource &>(a0), std::forward<class BlockPos const &>(a1), std::forward<int>(a2));
    }
    */
    MCAPI DiodeBlock(std::string const &, int, bool);
    MCAPI static bool isDiode(class Block const &);

protected:
    MCAPI int getAlternateSignalAt(class BlockSource &, class BlockPos const &, int) const;

private:

};