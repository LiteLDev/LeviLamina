// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class SnackGoal {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SNACKGOAL
public:
    class SnackGoal& operator=(class SnackGoal const &) = delete;
    SnackGoal(class SnackGoal const &) = delete;
    SnackGoal() = delete;
#endif

public:
    /*0*/ virtual ~SnackGoal();
    /*1*/ virtual bool canUse();
    /*2*/ virtual bool canContinueToUse();
    /*3*/ virtual void __unk_vfn_3();
    /*4*/ virtual void start();
    /*5*/ virtual void stop();
    /*6*/ virtual void tick();
    /*7*/ virtual void appendDebugInfo(std::string &) const;
    /*8*/ virtual void __unk_vfn_8();
    /*9*/ virtual void __unk_vfn_9();
    /*10*/ virtual int getRandomEatingEnd() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SNACKGOAL
#endif
    MCAPI SnackGoal(class Mob &, std::vector<class ItemDescriptor> const &, float, float, float);

protected:

private:
    MCAPI bool _hasSnackableItems();
    MCAPI bool _isSnackableItem(class ItemStack const &) const;
    MCAPI void _updateHand(class ItemStack const &);
    MCAPI static int const CHEW_CHANCE;
    MCAPI static int const EATING_TIME;
    MCAPI static float const PATH_RANGE;
    MCAPI static int const RANDOM_EATING_END;
    MCAPI static int const RANDOM_EATING_START;
    MCAPI static float const SEARCH_SIZE;
    MCAPI static float const STOP_DIST_SQRD;

};