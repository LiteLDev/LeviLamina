// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class BannerPattern {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BANNERPATTERN
public:
    class BannerPattern& operator=(class BannerPattern const &) = delete;
    BannerPattern(class BannerPattern const &) = delete;
    BannerPattern() = delete;
#endif

public:
    /*0*/ virtual ~BannerPattern();
    MCAPI bool getIgnoreAux() const;
    MCAPI class ItemStack const & getIngredientItem() const;
    MCAPI std::string const & getName() const;
    MCAPI std::string const & getNameID() const;
    MCAPI std::vector<std::string> const & getPattern() const;
    MCAPI bool hasPattern() const;
    MCAPI bool matchesPatternItem(class ItemStackBase const &) const;
    MCAPI bool requiresIngredientItem() const;
    MCAPI bool requiresPatternItem() const;
    MCAPI static class std::optional<unsigned char> findPatternIndexByNameID(std::string const &);
    MCAPI static class std::optional<unsigned char> getPatternIndexFromName(std::string const &);
    MCAPI static unsigned char getPatternIndexFromNameID(std::string const &);
    MCAPI static void initPatterns();
    MCAPI static class BannerPattern * mBase;
    MCAPI static class BannerPattern * mBorder;
    MCAPI static class BannerPattern * mBricks;
    MCAPI static class BannerPattern * mCircle;
    MCAPI static class BannerPattern * mCreeper;
    MCAPI static class BannerPattern * mCross;
    MCAPI static class BannerPattern * mCurlyBorder;
    MCAPI static class BannerPattern * mDiagonalLeft;
    MCAPI static class BannerPattern * mDiagonalRight;
    MCAPI static class BannerPattern * mDiagonalUpLeft;
    MCAPI static class BannerPattern * mDiagonalUpRight;
    MCAPI static class BannerPattern * mFlower;
    MCAPI static class BannerPattern * mGlobe;
    MCAPI static class BannerPattern * mGradient;
    MCAPI static class BannerPattern * mGradientUp;
    MCAPI static class BannerPattern * mHalfHorizontal;
    MCAPI static class BannerPattern * mHalfHorizontalBottom;
    MCAPI static class BannerPattern * mHalfVertical;
    MCAPI static class BannerPattern * mHalfVerticalRight;
    MCAPI static class BannerPattern * mMojang;
    MCAPI static std::vector<std::unique_ptr<class BannerPattern>> mPatterns;
    MCAPI static class BannerPattern * mPiglin;
    MCAPI static class BannerPattern * mRhombus;
    MCAPI static class BannerPattern * mSkull;
    MCAPI static class BannerPattern * mSmallStripes;
    MCAPI static class BannerPattern * mSquareBottomLeft;
    MCAPI static class BannerPattern * mSquareBottomRight;
    MCAPI static class BannerPattern * mSquareTopLeft;
    MCAPI static class BannerPattern * mSquareTopRight;
    MCAPI static class BannerPattern * mStraightCross;
    MCAPI static class BannerPattern * mStripeBottom;
    MCAPI static class BannerPattern * mStripeCenter;
    MCAPI static class BannerPattern * mStripeDownleft;
    MCAPI static class BannerPattern * mStripeDownright;
    MCAPI static class BannerPattern * mStripeLeft;
    MCAPI static class BannerPattern * mStripeMiddle;
    MCAPI static class BannerPattern * mStripeRight;
    MCAPI static class BannerPattern * mStripeTop;
    MCAPI static class BannerPattern * mTriangleBottom;
    MCAPI static class BannerPattern * mTriangleTop;
    MCAPI static class BannerPattern * mTrianglesBottom;
    MCAPI static class BannerPattern * mTrianglesTop;

protected:

private:

};