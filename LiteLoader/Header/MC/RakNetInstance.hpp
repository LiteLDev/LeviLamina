// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "RakPeerHelper.hpp"
#include "Bedrock.hpp"
#include "RakNet.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class RakNetInstance {

#define AFTER_EXTRA
// Add Member There
public:
class RakNetNetworkPeer {
public:
    RakNetNetworkPeer() = delete;
    RakNetNetworkPeer(RakNetNetworkPeer const&) = delete;
    RakNetNetworkPeer(RakNetNetworkPeer const&&) = delete;
};
enum NATState;

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_RAKNETINSTANCE
public:
    class RakNetInstance& operator=(class RakNetInstance const &) = delete;
    RakNetInstance(class RakNetInstance const &) = delete;
    RakNetInstance() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_RAKNETINSTANCE
    MCVAPI void _onDisable();
    MCVAPI void _onEnable();
    MCVAPI void addConnectionStateListener(class Connector::ConnectionStateListener *);
    MCVAPI bool connect(void *);
    MCVAPI void disconnect();
    MCVAPI class Social::GameConnectionInfo const & getConnectedGameInfo() const;
    MCVAPI unsigned short getIPv4Port() const;
    MCVAPI unsigned short getIPv6Port() const;
    MCVAPI std::string getLocalIp();
    MCVAPI std::vector<std::string> getLocalIps() const;
    MCVAPI struct Connector::NatPunchInfo getNatPunchInfo() const;
    MCVAPI class RakNet::RakPeerInterface * getPeer();
    MCVAPI class RakNet::RakPeerInterface const * getPeer() const;
    MCVAPI unsigned short getPort() const;
    MCVAPI std::vector<struct RakNet::SystemAddress> getRefinedLocalIps() const;
    MCVAPI unsigned __int64 getTransportIdentifier() const;
    MCVAPI bool host(struct ConnectionDefinition const &);
    MCVAPI bool isIPv4Supported() const;
    MCVAPI bool isIPv6Supported() const;
    MCVAPI bool isServer() const;
    MCVAPI void removeConnectionStateListener(class Connector::ConnectionStateListener *);
    MCVAPI void runEvents();
    MCVAPI void setupNatPunch(bool);
    MCVAPI void startNatPunchingClient(std::string const &, unsigned short);
    MCVAPI void tick();
    MCVAPI ~RakNetInstance();
#endif
    MCAPI RakNetInstance(class RakNetInstance::ConnectionCallbacks &, class RakPeerHelper::IPSupportInterface &, class Bedrock::NonOwnerPointer<class AppPlatform> const &);

protected:

private:
    MCAPI void _changeNatState(enum RakNetInstance::NATState, int, std::string const &);
    MCAPI class std::shared_ptr<class RakNetInstance::RakNetNetworkPeer> _createPeer(class NetworkIdentifier const &);
    MCAPI void _openNatConnection(struct RakNet::SystemAddress const &);
    MCAPI void _pingNatService(bool);
    MCAPI void _storeLocalIP();

};