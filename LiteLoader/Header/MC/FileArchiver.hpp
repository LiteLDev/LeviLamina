// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include <future>

#undef BEFORE_EXTRA

class FileArchiver {

#define AFTER_EXTRA
// Add Member There
public:
struct Result {
    Result() = delete;
    Result(Result const&) = delete;
    Result(Result const&&) = delete;
};

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_FILEARCHIVER
public:
    class FileArchiver& operator=(class FileArchiver const &) = delete;
    FileArchiver(class FileArchiver const &) = delete;
    FileArchiver() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_FILEARCHIVER
#endif
    MCAPI class std::future<struct FileArchiver::Result> archivePack(class Core::Path const &, class Core::Path const &, class std::function<void (struct FileArchiver::Result &)>);
    MCAPI static std::string const EXTENSION_ADDON;
    MCAPI static std::string const EXTENSION_RESOURCEPACK;
    MCAPI static std::string const EXTENSION_TEMPLATE;
    MCAPI static std::string const EXTENSION_VANILLA;
    MCAPI static std::string const IMPORT_LOCK_FILE;

protected:

private:
    MCAPI void _printLevelResultMessage(struct FileArchiver::Result const &);

};