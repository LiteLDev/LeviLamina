// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "SimpleContainer.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class SimplePlayerContainer : public SimpleContainer {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SIMPLEPLAYERCONTAINER
public:
    class SimplePlayerContainer& operator=(class SimplePlayerContainer const &) = delete;
    SimplePlayerContainer(class SimplePlayerContainer const &) = delete;
    SimplePlayerContainer() = delete;
#endif

public:
    /*0*/ virtual ~SimplePlayerContainer();
    /*1*/ virtual void init();
    /*9*/ virtual void setItem(int, class ItemStack const &);
    /*10*/ virtual void setItemWithForceBalance(int, class ItemStack const &, bool);
    /*15*/ virtual int getMaxStackSize() const;
    /*16*/ virtual void startOpen(class Player &);
    /*17*/ virtual void stopOpen(class Player &);
    /*22*/ virtual void __unk_vfn_22();
    /*23*/ virtual void __unk_vfn_23();
    /*31*/ virtual void initializeContainerContents(class BlockSource &);
    /*33*/ virtual bool add(class ItemStack &);
    /*34*/ virtual bool canAdd(class ItemStack const &) const;
    /*35*/ virtual void clearSlot(int);
    /*36*/ virtual int clearInventory(int);
    /*37*/ virtual void load(class ListTag const &, class SemVersion const &, class Level &);
    /*38*/ virtual int getEmptySlotsCount() const;
    MCAPI SimplePlayerContainer(class Player &, std::string const &, bool, int, enum ContainerType);

protected:

private:

};