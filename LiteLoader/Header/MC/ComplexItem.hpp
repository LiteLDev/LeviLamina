// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Potion.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ComplexItem : public Item {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMPLEXITEM
public:
    class ComplexItem& operator=(class ComplexItem const &) = delete;
    ComplexItem(class ComplexItem const &) = delete;
    ComplexItem() = delete;
#endif

public:
    /*0*/ virtual ~ComplexItem();
    /*5*/ virtual void __unk_vfn_5();
    /*7*/ virtual void __unk_vfn_7();
    /*10*/ virtual void __unk_vfn_10();
    /*12*/ virtual void __unk_vfn_12();
    /*47*/ virtual void __unk_vfn_47();
    /*49*/ virtual void __unk_vfn_49();
    /*62*/ virtual void __unk_vfn_62();
    /*66*/ virtual void __unk_vfn_66();
    /*67*/ virtual void __unk_vfn_67();
    /*68*/ virtual void __unk_vfn_68();
    /*71*/ virtual void __unk_vfn_71();
    /*75*/ virtual void __unk_vfn_75();
    /*76*/ virtual void __unk_vfn_76();
    /*
    inline bool isComplex() const{
        bool (ComplexItem::*rv)() const;
        *((void**)&rv) = dlsym("?isComplex@ComplexItem@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline std::unique_ptr<class Packet> getUpdatePacket(class ItemStack const & a0, class Level & a1, class Actor & a2) const{
        std::unique_ptr<class Packet> (ComplexItem::*rv)(class ItemStack const &, class Level &, class Actor &) const;
        *((void**)&rv) = dlsym("?getUpdatePacket@ComplexItem@@UEBA?AV?$unique_ptr@VPacket@@U?$default_delete@VPacket@@@std@@@std@@AEBVItemStack@@AEAVLevel@@AEAVActor@@@Z");
        return (this->*rv)(std::forward<class ItemStack const &>(a0), std::forward<class Level &>(a1), std::forward<class Actor &>(a2));
    }
    */
    MCAPI ComplexItem(std::string const &, int);

protected:

private:

};