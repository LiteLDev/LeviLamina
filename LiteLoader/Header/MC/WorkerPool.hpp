// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class WorkerPool {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_WORKERPOOL
public:
    class WorkerPool& operator=(class WorkerPool const &) = delete;
    WorkerPool(class WorkerPool const &) = delete;
    WorkerPool() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_WORKERPOOL
#endif
    MCAPI WorkerPool(std::string, class Scheduler &);
    MCAPI WorkerPool(std::string, unsigned __int64, class Bedrock::Threading::OSThreadPriority const &, class std::optional<unsigned __int64>, bool);
    MCAPI void queue(class std::shared_ptr<class BackgroundTaskBase>, bool);
    MCAPI void resortPriorityQueue();
    MCAPI unsigned __int64 size() const;
    MCAPI class std::shared_ptr<class BackgroundTaskBase> tryPop(int);

protected:
    MCAPI static void _registerPool(class WorkerPool &);
    MCAPI static class SmallSet<class WorkerPool *> sAllPools;
    MCAPI static class std::mutex sAllPoolsMutex;

private:
    MCAPI bool _checkPendingWork();

};