// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"
#include "TransactionalWorldBlockTarget.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class InMemoryEnv : public TransactionalWorldBlockTarget {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_INMEMORYENV
public:
    class InMemoryEnv& operator=(class InMemoryEnv const &) = delete;
    InMemoryEnv(class InMemoryEnv const &) = delete;
    InMemoryEnv() = delete;
#endif

public:
    /*0*/ virtual ~InMemoryEnv();
    /*1*/ virtual class leveldb::Status NewSequentialFile(std::string const &, class leveldb::SequentialFile **);
    /*2*/ virtual class leveldb::Status NewRandomAccessFile(std::string const &, class leveldb::RandomAccessFile **);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_INMEMORYENV
    MCVAPI class leveldb::Status DeleteFileA(std::string const &);
    MCVAPI bool FileExists(std::string const &);
    MCVAPI class leveldb::Status GetChildren(std::string const &, std::vector<std::string> *);
    MCVAPI class leveldb::Status NewAppendableFile(std::string const &, class leveldb::WritableFile **);
    MCVAPI class leveldb::Status NewWritableFile(std::string const &, class leveldb::WritableFile **);
    MCVAPI class leveldb::Status RenameFile(std::string const &, std::string const &);
    MCVAPI void flushToPermanentStorage();
#endif
    MCAPI InMemoryEnv(class leveldb::Env *, class Core::Path const &);

protected:

private:
    MCAPI void _flushWithTransaction();

};