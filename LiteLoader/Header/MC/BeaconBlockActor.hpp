// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class BeaconBlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BEACONBLOCKACTOR
public:
    class BeaconBlockActor& operator=(class BeaconBlockActor const &) = delete;
    BeaconBlockActor(class BeaconBlockActor const &) = delete;
    BeaconBlockActor() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BEACONBLOCKACTOR
    MCVAPI std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
    MCVAPI void _onUpdatePacket(class CompoundTag const &, class BlockSource &);
    MCVAPI class Container const * getContainer() const;
    MCVAPI class Container * getContainer();
    MCVAPI int getContainerSize() const;
    MCVAPI class ItemStack const & getItem(int) const;
    MCVAPI int getMaxStackSize() const;
    MCVAPI std::string getName() const;
    MCVAPI bool hasAlphaLayer() const;
    MCVAPI void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    MCVAPI void removeItem(int, int);
    MCVAPI bool save(class CompoundTag &) const;
    MCVAPI void serverInitItemStackIds(int, int, class std::function<void (int, class ItemStack const &)>);
    MCVAPI void setItem(int, class ItemStack const &);
    MCVAPI void startOpen(class Player &);
    MCVAPI void stopOpen(class Player &);
    MCVAPI void tick(class BlockSource &);
#endif
    MCAPI BeaconBlockActor(class BlockPos const &);
    MCAPI void checkShapeAndAchievement(class BlockSource &);
    MCAPI class CompoundTag getBeaconData();
    MCAPI bool isEffectAvailable(int) const;
    MCAPI bool isSecondaryAvailable() const;
    MCAPI bool setPrimaryEffect(int);
    MCAPI bool setSecondaryEffect(int);
    MCAPI static bool isPaymentItem(class ItemDescriptor const &);

protected:

private:
    MCAPI void _applyEffects(class BlockSource &);
    MCAPI int _getEffectTier(int) const;
    MCAPI bool _isEffectValid(int) const;
    MCAPI bool _isSecondaryEffectValid(int) const;
    MCAPI void _loadClientSideState(class Level &, class CompoundTag const &, class DataLoadHelper &);
    MCAPI bool _saveClientSideState(class CompoundTag &) const;

};