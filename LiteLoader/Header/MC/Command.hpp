/**
 * @file  Command.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "CommandRegistry.hpp"
#include "CommandParameterData.hpp"
#include "CommandFlag.hpp"
class CommandRegistry;
// class CommandRegistry::Symbol;
enum CommandPermissionLevel : char {
    Any = 0,
    GameMasters = 1,
    Admin = 2,
    HostPlayer = 3,
    Console = 4,
    Internal = 5,
};

enum class OriginType : char {
    Player = 0,
    Block = 1,
    MinecartBlock = 2,
    DevConsole = 3,
    Test = 4,
    AutomationPlayer = 5,
    ClientAutomation = 6,
    Server = 7,
    Actor = 8,
    Virtual = 9,
    GameArgument = 10,
    ActorServer = 11,
    Precompiled = 12,
    GameDirectorEntity = 13,
    Script = 14,
    ExecuteContext = 15,

    DedicatedServer = 7, // Server
};

class CommandOutput;

#undef BEFORE_EXTRA

/**
 * @brief MC class Command.
 *
 */
class Command {

#define AFTER_EXTRA
    // Add Member There

protected:
    int version;                       // 8
    CommandRegistry* registry;         // 16
    CommandRegistry::Symbol symbol;    // 24,
    CommandPermissionLevel permission; // 28
    CommandFlag flag;                  // 30

public:
    template <typename T>
    static bool checkHasTargets(CommandSelectorResults<T> const& a, CommandOutput& b) {
        bool (*sym)(CommandSelectorResults<T> const& a, CommandOutput& b);
        if constexpr (std::is_same<T, class Actor>()) {
            sym = (decltype(sym))dlsym("??$checkHasTargets@VActor@@@Command@@KA_NAEBV?$CommandSelectorResults@VActor@@@@AEAVCommandOutput@@@Z");
        } else {
            sym = (decltype(sym))dlsym("??$checkHasTargets@VPlayer@@@Command@@KA_NAEBV?$CommandSelectorResults@VPlayer@@@@AEAVCommandOutput@@@Z");
        }
        return sym(a, b);
    }
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMMAND
public:
    class Command& operator=(class Command const &) = delete;
    Command(class Command const &) = delete;
#endif

public:
    /**
     * @vftbl  0
     * @hash   1877984281
     */
    virtual ~Command();
    /**
     * @vftbl  1
     * @symbol ?execute@XPCommand@@UEBAXAEBVCommandOrigin@@AEAVCommandOutput@@@Z
     * @hash   1309234419
     */
    virtual void execute(class CommandOrigin const &, class CommandOutput &) const = 0;
    /**
     * @symbol ??0Command@@QEAA@XZ
     * @hash   -2072440073
     */
    MCAPI Command();
    /**
     * @symbol ?getCommandName@Command@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
     * @hash   -1178335384
     */
    MCAPI std::string getCommandName() const;
    /**
     * @symbol ?hasFlag@Command@@QEBA_NUCommandFlag@@@Z
     * @hash   1121813567
     */
    MCAPI bool hasFlag(struct CommandFlag) const;
    /**
     * @symbol ?run@Command@@QEBAXAEBVCommandOrigin@@AEAVCommandOutput@@@Z
     * @hash   -1454333249
     */
    MCAPI void run(class CommandOrigin const &, class CommandOutput &) const;
    /**
     * @symbol ?WILDCARD_TOKEN@Command@@2V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B
     * @hash   -826739889
     */
    MCAPI static std::string const WILDCARD_TOKEN;
    /**
     * @symbol ?validRange@Command@@SA_NHHHAEAVCommandOutput@@@Z
     * @hash   354079810
     */
    MCAPI static bool validRange(int, int, int, class CommandOutput &);
    /**
     * @symbol ?validRange@Command@@SA_NMMMAEAVCommandOutput@@@Z
     * @hash   245860324
     */
    MCAPI static bool validRange(float, float, float, class CommandOutput &);

//protected:
    /**
     * @symbol ?getRegistry@Command@@IEBAAEBVCommandRegistry@@XZ
     * @hash   -2080983583
     */
    MCAPI class CommandRegistry const & getRegistry() const;
    /**
     * @symbol ?sendTelemetry@Command@@IEBAXAEBVCommandOrigin@@AEAVCommandOutput@@@Z
     * @hash   -2032834368
     */
    MCAPI void sendTelemetry(class CommandOrigin const &, class CommandOutput &) const;
    /**
     * @symbol ?shouldSendTelemetry@Command@@IEBA_NAEBVCommandOrigin@@@Z
     * @hash   -1012870713
     */
    MCAPI bool shouldSendTelemetry(class CommandOrigin const &) const;
    /**
     * @symbol ?getPlayerFromOrigin@Command@@KAPEAVPlayer@@AEBVCommandOrigin@@@Z
     * @hash   488245468
     */
    MCAPI static class Player * getPlayerFromOrigin(class CommandOrigin const &);
    /**
     * @symbol ?isTemplateLockedAction@Command@@KA_NAEBVCommandOrigin@@@Z
     * @hash   1977492162
     */
    MCAPI static bool isTemplateLockedAction(class CommandOrigin const &);
    /**
     * @symbol ?isWildcard@Command@@KA_NAEBVCommandSelectorBase@@@Z
     * @hash   -30233656
     */
    MCAPI static bool isWildcard(class CommandSelectorBase const &);
    /**
     * @symbol ?validData@Command@@KA_NHAEAGAEAVCommandOutput@@@Z
     * @hash   1783827796
     */
    MCAPI static bool validData(int, unsigned short &, class CommandOutput &);

protected:

};