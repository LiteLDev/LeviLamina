// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "TransactionalWorldBlockTarget.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class CompactionListenerEnv : public TransactionalWorldBlockTarget {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMPACTIONLISTENERENV
public:
    class CompactionListenerEnv& operator=(class CompactionListenerEnv const &) = delete;
    CompactionListenerEnv(class CompactionListenerEnv const &) = delete;
    CompactionListenerEnv() = delete;
#endif

public:
    /*0*/ virtual ~CompactionListenerEnv();
    /*1*/ virtual class leveldb::Status NewSequentialFile(std::string const &, class leveldb::SequentialFile **);
    /*2*/ virtual class leveldb::Status NewRandomAccessFile(std::string const &, class leveldb::RandomAccessFile **);
    /*3*/ virtual class Block const * tryGetLiquidBlock(class BlockPos const &) const;
    /*4*/ virtual class Block const & getBlock(class BlockPos const &) const;
    /*5*/ virtual class Block const & getBlockNoBoundsCheck(class BlockPos const &) const;
    /*6*/ virtual class Block const & getExtraBlock(class BlockPos const &) const;
    /*7*/ virtual class gsl::span<class BlockDataFetchResult<class Block> const, -1> fetchBlocksInBox(class BoundingBox const &, class std::function<bool (class Block const &)>);
    /*8*/ virtual bool hasBiomeTag(unsigned __int64, class BlockPos const &) const;
    /*9*/ virtual bool setBlock(class BlockPos const &, class Block const &, int);
    /*10*/ virtual bool setBlockSimple(class BlockPos const &, class Block const &);
    /*11*/ virtual bool apply() const;
    /*12*/ virtual bool placeStructure(class BlockPos const &, class StructureTemplate &, class StructureSettings &);
    /*13*/ virtual bool mayPlace(class BlockPos const &, class Block const &) const;
    /*14*/ virtual bool canSurvive(class BlockPos const &, class Block const &) const;
    /*16*/ virtual short getMinHeight() const;
    /*17*/ virtual void __unk_vfn_17();
    /*
    inline void Schedule(void ( *)(void *) a0, void * a1){
        void (CompactionListenerEnv::*rv)(void ( *)(void *), void *);
        *((void**)&rv) = dlsym("?Schedule@CompactionListenerEnv@@UEAAXP6AXPEAX@Z0@Z");
        return (this->*rv)(std::forward<void ( *)(void *)>(a0), std::forward<void *>(a1));
    }
    */
    MCAPI CompactionListenerEnv(class leveldb::Env *);
    MCAPI void setCompactionCallback(class std::function<void (enum CompactionStatus)>);

protected:

private:

};