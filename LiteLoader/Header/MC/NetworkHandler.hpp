// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class NetworkHandler {

#define AFTER_EXTRA
// Add Member There
public:
class Connection {
public:
    Connection() = delete;
    Connection(Connection const&) = delete;
    Connection(Connection const&&) = delete;
};

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_NETWORKHANDLER
public:
    class NetworkHandler& operator=(class NetworkHandler const &) = delete;
    NetworkHandler(class NetworkHandler const &) = delete;
    NetworkHandler() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_NETWORKHANDLER
    MCVAPI void _onDisable();
    MCVAPI void _onEnable();
    MCVAPI class Social::GameConnectionInfo const & getConnectionInfo() const;
    MCVAPI unsigned short getDefaultGamePort() const;
    MCVAPI unsigned short getDefaultGamePortv6() const;
    MCVAPI void onAllConnectionsClosed(std::string const &, bool);
    MCVAPI void onAllRemoteConnectionsClosed(std::string const &, bool);
    MCVAPI void onConnectionClosed(class NetworkIdentifier const &, std::string const &, bool);
    MCVAPI void onNewIncomingConnection(class NetworkIdentifier const &, class std::shared_ptr<class NetworkPeer>);
    MCVAPI void onNewIncomingLocalConnection(class NetworkIdentifier const &, class std::shared_ptr<class NetworkPeer>);
    MCVAPI void onNewOutgoingConnection(class NetworkIdentifier const &, class std::shared_ptr<class NetworkPeer>);
    MCVAPI void onNewOutgoingLocalConnection(class NetworkIdentifier const &, class std::shared_ptr<class NetworkPeer>);
    MCVAPI void onOutgoingConnectionFailed();
    MCVAPI void onWebsocketRequest(std::string const &, std::string const &, class std::function<void (void)>);
    MCVAPI bool useIPv4Only() const;
    MCVAPI bool useIPv6Only() const;
    MCVAPI ~NetworkHandler();
#endif
    MCAPI bool AddConnectionIfNeeded(unsigned __int64, class std::shared_ptr<struct NetherNetInstance> const &);
    MCAPI NetworkHandler(class Scheduler &, std::vector<std::string> const &, struct NetworkHandlerToggles, class Bedrock::NonOwnerPointer<class NetworkDebugManager> const &);
    MCAPI void disconnect();
    MCAPI void enableAsyncFlush(class NetworkIdentifier const &);
    MCAPI void flush(class NetworkIdentifier const &, class std::function<void (void)> &&);
    MCAPI std::vector<std::unique_ptr<class NetworkHandler::Connection>> const & getConnections() const;
    MCAPI class Connector & getConnector();
    MCAPI class std::weak_ptr<class EncryptedNetworkPeer> getEncryptedPeerForUser(class NetworkIdentifier const &);
    MCAPI class NetworkIdentifier getLocalNetworkId() const;
    MCAPI class NetworkStatistics const * getNetworkStatistics() const;
    MCAPI class NetworkPeer * getPeerForUser(class NetworkIdentifier const &);
    MCAPI class NetworkIdentifier getPrimaryNetworkId() const;
    MCAPI class ResourcePackFileUploadManager & getResourcePackUploadManager(class PacketSender &, class NetworkIdentifier const &, std::string const &);
    MCAPI class NetworkIdentifier getServerId() const;
    MCAPI class ServerLocator & getServerLocator();
    MCAPI bool host(struct ConnectionDefinition const &);
    MCAPI void initializeSelectedTransportType();
    MCAPI void initializeServerLocatorTransportType();
    MCAPI bool isHostingPlayer(class NetworkIdentifier const &, unsigned char const &) const;
    MCAPI bool isServer() const;
    MCAPI void registerServerInstance(class NetEventCallback &);
    MCAPI void runEvents(bool);
    MCAPI void send(class NetworkIdentifier const &, class Packet const &, unsigned char);
    MCAPI void sendToMultiple(std::vector<struct NetworkIdentifierWithSubId> const &, class Packet const &);
    MCAPI void setCloseConnection(class NetworkIdentifier const &);
    MCAPI void unregisterClientOrServerInstance(unsigned char const &);
    MCAPI void update(std::vector<class WeakEntityRef> const *);
    MCAPI static class std::shared_ptr<struct NetherNetInstance> mNetherNetInstance;

protected:

private:
    MCAPI class NetworkHandler::Connection * _getConnectionFromId(class NetworkIdentifier const &) const;
    MCAPI void _handlePacketViolation(enum StreamReadResult, enum PacketViolationResponse, enum MinecraftPacketIds, class NetworkIdentifier const &, class NetworkHandler::Connection &, unsigned char, std::string const &);
    MCAPI void _sendInternal(class NetworkIdentifier const &, class Packet const &, std::string const &);
    MCAPI bool _sortAndPacketizeEvents(class NetworkHandler::Connection &, class std::chrono::time_point<struct std::chrono::steady_clock, class std::chrono::duration<__int64, struct std::ratio<1, 1000000000>>>);

};