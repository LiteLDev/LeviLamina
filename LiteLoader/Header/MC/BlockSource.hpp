// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "BlockInstance.hpp"

#undef BEFORE_EXTRA

class BlockSource {

#define AFTER_EXTRA
// Add Member There
public:
struct ClipParameters
{
    MCAPI static const std::function<bool(class Block const&)> CHECK_ALL_BLOCKS;
};
	LIAPI BlockInstance getBlockInstance(BlockPos);

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BLOCKSOURCE
public:
    class BlockSource& operator=(class BlockSource const &) = delete;
    BlockSource(class BlockSource const &) = delete;
    BlockSource() = delete;
#endif

public:
    /*0*/ virtual ~BlockSource();
    /*1*/ virtual class Block const & getBlock(int, int, int) const;
    /*2*/ virtual class Block const & getBlock(class BlockPos const &) const;
    /*3*/ virtual class Block const & getBlock(class BlockPos const &, unsigned int) const;
    /*4*/ virtual void __unk_vfn_4();
    /*5*/ virtual class Block const & getExtraBlock(class BlockPos const &) const;
    /*6*/ virtual class Block const & getLiquidBlock(class BlockPos const &) const;
    /*7*/ virtual bool hasBlock(class BlockPos const &) const;
    /*8*/ virtual bool containsMaterial(class AABB const &, enum MaterialType) const;
    /*9*/ virtual class Material const & getMaterial(class BlockPos const &) const;
    /*10*/ virtual class Material const & getMaterial(int, int, int) const;
    /*11*/ virtual bool hasChunksAt(struct Bounds const &) const;
    /*12*/ virtual bool hasChunksAt(class BlockPos const &, int) const;
    /*13*/ virtual bool hasChunksAt(class AABB const &) const;
    /*14*/ virtual class AutomaticID<class Dimension, int> getDimensionId() const;
    /*15*/ virtual class WeakRefT<struct SharePtrRefTraits<class BlockSource>> getWeakRef();
    /*16*/ virtual void addListener(class BlockSourceListener &);
    /*17*/ virtual void removeListener(class BlockSourceListener &);
    /*18*/ virtual class gsl::span<class gsl::not_null<class Actor *>, -1> fetchEntities(class Actor const *, class AABB const &, bool);
    /*19*/ virtual class gsl::span<class gsl::not_null<class Actor *>, -1> fetchEntities(enum ActorType, class AABB const &, class Actor const *);
    /*20*/ virtual bool setBlock(class BlockPos const &, class Block const &, int, struct ActorBlockSyncMessage const *, class Actor *);
    /*21*/ virtual bool containsAnyLiquid(class AABB const &);
    /*22*/ virtual short getMinHeight() const;
    /*23*/ virtual void __unk_vfn_23();
    /*24*/ virtual void __unk_vfn_24();
    /*25*/ virtual void __unk_vfn_25();
    /*26*/ virtual std::vector<class AABB> & fetchAABBs(class AABB const &, bool);
    /*27*/ virtual std::vector<class AABB> & fetchCollisionShapes(class AABB const &, float *, bool, struct IActorMovementProxy *);
    /*28*/ virtual class AABB getTallestCollisionShape(class AABB const &, float *, bool, struct IActorMovementProxy *);
    /*29*/ virtual void __unk_vfn_29();
    /*30*/ virtual bool isSolidBlockingBlock(class BlockPos const &) const;
    /*
    inline class ILevel & getILevel() const{
        class ILevel & (BlockSource::*rv)() const;
        *((void**)&rv) = dlsym("?getILevel@BlockSource@@UEBAAEAVILevel@@XZ");
        return (this->*rv)();
    }
    inline class ChunkSource & getChunkSource(){
        class ChunkSource & (BlockSource::*rv)();
        *((void**)&rv) = dlsym("?getChunkSource@BlockSource@@UEAAAEAVChunkSource@@XZ");
        return (this->*rv)();
    }
    inline class Dimension & getDimension(){
        class Dimension & (BlockSource::*rv)();
        *((void**)&rv) = dlsym("?getDimension@BlockSource@@UEAAAEAVDimension@@XZ");
        return (this->*rv)();
    }
    inline class Dimension & getDimension() const{
        class Dimension & (BlockSource::*rv)() const;
        *((void**)&rv) = dlsym("?getDimension@BlockSource@@UEBAAEAVDimension@@XZ");
        return (this->*rv)();
    }
    inline  ~BlockSource(){
         (BlockSource::*rv)();
        *((void**)&rv) = dlsym("??1BlockSource@@UEAA@XZ");
        return (this->*rv)();
    }
    inline class BlockActor const * getBlockEntity(class BlockPos const & a0) const{
        class BlockActor const * (BlockSource::*rv)(class BlockPos const &) const;
        *((void**)&rv) = dlsym("?getBlockEntity@BlockSource@@UEBAPEBVBlockActor@@AEBVBlockPos@@@Z");
        return (this->*rv)(std::forward<class BlockPos const &>(a0));
    }
    */
    MCAPI BlockSource(class ChunkSource &, bool, bool);
    MCAPI BlockSource(class Level &, class Dimension &, class ChunkSource &, bool, bool);
    MCAPI class gsl::span<class gsl::not_null<class Actor *>, -1> _fetchEntities(struct IActorMovementProxy const *, class AABB const &, bool);
    MCAPI void addToRandomTickingQueue(class BlockPos const &, class Block const &, int, int, bool);
    MCAPI void addToRandomTickingQueuePercentChance(class BlockPos const &, class Block const &, float, int, bool);
    MCAPI void addToTickingQueue(class BlockPos const &, class Block const &, int, int, bool);
    MCAPI bool allowsRunes(class BlockPos const &);
    MCAPI bool areAllChunksLoaded(class BlockPos const &, class BlockVolume &) const;
    MCAPI bool areChunksFullyLoaded(class BlockPos const &, class BlockPos const &) const;
    MCAPI bool areChunksFullyLoaded(class BlockPos const &, int) const;
    MCAPI void blockEvent(class BlockPos const &, int, int);
    MCAPI bool canProvideSupport(class BlockPos const &, unsigned char, enum BlockSupportType) const;
    MCAPI bool canSeeSky(class BlockPos const &) const;
    MCAPI bool canSeeSky(int, int, int) const;
    MCAPI bool canSeeSkyFromBelowWater(class BlockPos const &);
    MCAPI bool checkBlockDestroyPermissions(class Actor &, class BlockPos const &, class ItemStackBase const &, bool);
    MCAPI bool checkBlockPermissions(class Actor &, class BlockPos const &, unsigned char, class ItemStackBase const &, bool);
    MCAPI void clearDeletedEntities();
    MCAPI class HitResult clip(struct BlockSource::ClipParameters const &) const;
    MCAPI class HitResult clip(class Vec3 const &, class Vec3 const &, bool, bool, int, bool, bool, class Player *, class std::function<bool (class Block const &)> const &) const;
    MCAPI bool containsAnyBlockInBox(class BoundingBox const &, class std::function<bool (class Block const &)>);
    MCAPI bool containsAnyBlockOfType(class BlockPos const &, class BlockPos const &, class Block const &) const;
    MCAPI bool containsAnySolidBlocking(class AABB const &) const;
    MCAPI unsigned __int64 countBlocksOfType(class BlockDescriptor const &, class BlockPos const &, class BlockPos const &, unsigned __int64) const;
    MCAPI void fetchActorIds(class AABB const &, std::vector<struct ActorUniqueID> &) const;
    MCAPI void fetchActorIds(unsigned __int64, class AABB const &, std::vector<struct ActorUniqueID> &) const;
    MCAPI class gsl::span<class gsl::not_null<class Actor *>, -1> fetchActors(struct ActorDefinitionIdentifier const &, class AABB const &);
    MCAPI std::vector<class BlockActor *> const & fetchBlockEntities(class AABB const &);
    MCAPI std::vector<class BlockActor *> fetchBlockEntities(enum BlockActorType, class AABB const &) const;
    MCAPI bool fetchBlocks(class BlockPos const &, class BlockVolume &) const;
    MCAPI class gsl::span<class BlockDataFetchResult<class Block> const, -1> fetchBlocksInBox(class BoundingBox const &, class std::function<bool (class Block const &)>);
    MCAPI class gsl::span<class BlockDataFetchResult<class Block> const, -1> fetchBlocksInBoxSorted(class BoundingBox const &, class std::function<bool (class Block const &)>);
    MCAPI class gsl::span<class BlockDataFetchResult<class Block> const, -1> fetchBlocksInCylinder(class BlockPos const &, unsigned int, unsigned int, class std::function<bool (class Block const &)>);
    MCAPI class gsl::span<class BlockDataFetchResult<class Block> const, -1> fetchBlocksInCylinderSorted(class BlockPos const &, unsigned int, unsigned int, class std::function<bool (class Block const &)>);
    MCAPI class gsl::span<class gsl::not_null<class Actor *>, -1> fetchEntities(class gsl::span<class gsl::not_null<class Actor const *>, -1>, class AABB const &, bool);
    MCAPI std::vector<class Actor *> const & fetchEntities2(enum ActorType, class AABB const &, bool);
    MCAPI class Actor * fetchNearestEntityOfType(class Actor const *, class AABB const &, enum ActorType);
    MCAPI class Actor * fetchNearestEntityOfType(class Actor const *, class Vec3 const &, float, enum ActorType);
    MCAPI bool findNextTopSolidBlockAbove(class BlockPos &);
    MCAPI bool findNextTopSolidBlockUnder(class BlockPos &);
    MCAPI void fireAreaChanged(class BlockPos const &, class BlockPos const &);
    MCAPI void fireBlockChanged(class BlockPos const &, unsigned int, class Block const &, class Block const &, int, enum BlockChangedEventTarget, struct ActorBlockSyncMessage const *, class Actor *);
    MCAPI void fireBlockEntityAboutToBeRemoved(class std::shared_ptr<class BlockActor>);
    MCAPI void fireBlockEntityChanged(class BlockActor &);
    MCAPI void fireBrightnessChanged(class BlockPos const &);
    MCAPI void fireEntityChanged(class Actor &);
    MCAPI class AABB generateUnloadedChunkAABB(class ChunkPos const &);
    MCAPI short getAboveTopSolidBlock(class BlockPos const &, bool, bool);
    MCAPI short getAboveTopSolidBlock(int, int, bool, bool);
    MCAPI short getAllocatedHeightAt(class BlockPos const &);
    MCAPI class Biome & getBiome(class BlockPos const &);
    MCAPI class BlockActor * getBlockEntity(class BlockPos const &);
    MCAPI class BlockActor * getBlockEntity(int, int, int);
    MCAPI float getBrightness(class BlockPos const &) const;
    MCAPI struct BrightnessPair getBrightnessPair(class BlockPos const &) const;
    MCAPI class LevelChunk * getChunk(class ChunkPos const &) const;
    MCAPI class LevelChunk * getChunk(int, int) const;
    MCAPI class LevelChunk * getChunkAt(class BlockPos const &) const;
    MCAPI class Biome const & getConstBiome(class BlockPos const &) const;
    MCAPI class Dimension const & getDimensionConst() const;
    MCAPI int getGrassColor(class BlockPos const &) const;
    MCAPI short getHeightmap(int, int);
    MCAPI short getHeightmap(class BlockPos const &) const;
    MCAPI class BlockPos getHeightmapPos(class BlockPos const &) const;
    MCAPI class Level & getLevel();
    MCAPI class Level & getLevel() const;
    MCAPI class Level const & getLevelConst() const;
    MCAPI bool getNextTickUpdateForPos(class BlockPos const &, enum TickingQueueType, struct Tick &) const;
    MCAPI bool getPublicSource() const;
    MCAPI struct Brightness getRawBrightness(class BlockPos const &, bool, bool) const;
    MCAPI struct Brightness getRawBrightnessWithManualDarken(class BlockPos const &, struct Brightness, bool, bool) const;
    MCAPI float getSeenPercent(class Vec3 const &, class AABB const &);
    MCAPI class BlockTickingQueue * getTickingQueue(class BlockPos const &, enum TickingQueueType, bool) const;
    MCAPI float getVisualLiquidHeight(class Vec3 const &);
    MCAPI short getVoidHeight() const;
    MCAPI class LevelChunk * getWritableChunk(class ChunkPos const &);
    MCAPI bool hasBorderBlock(class BlockPos) const;
    MCAPI bool hasChunksAt(class BlockPos const &, class BlockPos const &) const;
    MCAPI bool hasTickInCurrentTick(class BlockPos const &) const;
    MCAPI bool hasTickInCurrentTick(class BlockPos const &, enum TickingQueueType) const;
    MCAPI bool hasTickInPendingTicks(class BlockPos const &) const;
    MCAPI bool hasTickInPendingTicks(class BlockPos const &, class Block const &) const;
    MCAPI bool hasTickInPendingTicks(class BlockPos const &, class Block const &, enum TickingQueueType) const;
    MCAPI bool hasTickInPendingTicks(class BlockPos const &, class BlockLegacy const &) const;
    MCAPI bool hasTickInPendingTicks(class BlockPos const &, class BlockLegacy const &, enum TickingQueueType) const;
    MCAPI bool hasTickInPendingTicks(class BlockPos const &, enum TickingQueueType) const;
    MCAPI bool hasUntickedNeighborChunk(class ChunkPos const &, int) const;
    MCAPI bool isChunkFullyLoaded(class ChunkPos const &, class ChunkSource const &) const;
    MCAPI bool isConsideredSolidBlock(class BlockPos const &);
    MCAPI bool isEmptyBlock(int, int, int);
    MCAPI bool isEmptyBlock(class BlockPos const &) const;
    MCAPI bool isEmptyWaterBlock(class BlockPos const &) const;
    MCAPI bool isInWall(class Vec3 const &);
    MCAPI bool isInstaticking(class BlockPos const &) const;
    MCAPI bool isNearUnloadedChunks(class ChunkPos const &);
    MCAPI bool isPositionUnderLiquid(class Vec3 const &, enum MaterialType);
    MCAPI bool isSolidBlockingBlock(int, int, int) const;
    MCAPI bool isTouchingMaterial(class BlockPos const &, enum MaterialType) const;
    MCAPI bool isUnderWater(class Vec3 const &, class Block const &) const;
    MCAPI bool isUnobstructedByEntities(class AABB const &, class Actor const *);
    MCAPI bool isUnobstructedByEntities(class AABB const &, class gsl::span<class gsl::not_null<class Actor const *>, -1>);
    MCAPI bool mayPlace(class Block const &, class BlockPos const &, unsigned char, class Actor *, bool);
    MCAPI void neighborChanged(class BlockPos const &, class BlockPos const &);
    MCAPI void postGameEvent(class Actor *, class GameEvent const &, class Vec3 const &, class BlockSource &) const;
    MCAPI bool removeBlock(class BlockPos const &);
    MCAPI bool removeBlock(int, int, int);
    MCAPI class std::shared_ptr<class BlockActor> removeBlockEntity(class BlockPos const &);
    MCAPI void removeFromRandomTickingQueue(class BlockPos const &, class Block const &);
    MCAPI void removeFromTickingQueue(class BlockPos const &, class Block const &);
    MCAPI bool setBlock(class BlockPos const &, class Block const &, int, class std::shared_ptr<class BlockActor>, struct ActorBlockSyncMessage const *, class Actor *);
    MCAPI bool setBlock(int, int, int, class Block const &, int, class Actor *);
    MCAPI bool setBlockNoUpdate(int, int, int, class Block const &);
    MCAPI bool setBlockSimple(class BlockPos const &, class Block const &);
    MCAPI void setBorderBlock(class BlockPos const &, bool);
    MCAPI bool setExtraBlock(class BlockPos const &, class Block const &, int);
    MCAPI bool setExtraBlockSimple(class BlockPos const &, class Block const &);
    MCAPI bool setLiquidBlock(class BlockPos const &, class Block const &, bool, int);
    MCAPI void setRandomTickingQueue(class BlockTickingQueue &);
    MCAPI void setTickingQueue(class BlockTickingQueue &);
    MCAPI bool shouldFireEvents(class LevelChunk &) const;
    MCAPI void spawnResources(class BlockPos const &, float, int);
    MCAPI int ticksFromNow(class BlockPos const &, enum TickingQueueType, int) const;
    MCAPI class Biome * tryGetBiome(class BlockPos const &) const;
    MCAPI void updateNeighborsAt(class BlockPos const &);
    MCAPI void updateNeighborsAtExceptFromFacing(class BlockPos const &, class BlockPos const &, int);

protected:
    MCAPI void _blockChanged(class BlockPos const &, unsigned int, class Block const &, class Block const &, int, struct ActorBlockSyncMessage const *, class Actor *);
    MCAPI std::vector<class AABB> & _fetchBorderBlockCollisions(class AABB const &, struct IActorMovementProxy *, bool);
    MCAPI void _fetchEntityHelper(class WeakEntityRef, class gsl::span<class gsl::not_null<class Actor const *>, -1>, class AABB const &, bool);
    MCAPI bool _hasChunksAt(struct Bounds const &) const;
    MCAPI void _updateTallestCollisionShapeWithBorderBlockCollisions(class AABB const &, struct IActorMovementProxy *, class AABB &, class Vec3 const &, float &);
    MCAPI void addUnloadedChunksAABBs(class AABB const &);
    MCAPI void addVoidFloor(class AABB const &);
    MCAPI void getTallestCollisionShapeFromUnloadedChunksAABBs(class AABB const &, class AABB &, class Vec3 const &, float &);

private:
    MCAPI bool _getBlockPermissions(class BlockPos const &, bool);
    MCAPI float _getLiquidHeight(class BlockPos const &, enum MaterialType, bool);
    MCAPI struct Brightness _getRawBrightness(class BlockPos const &, struct Brightness, bool, bool) const;
    MCAPI void _removeFromTickingQueue(class BlockPos const &, class Block const &, enum TickingQueueType);

};