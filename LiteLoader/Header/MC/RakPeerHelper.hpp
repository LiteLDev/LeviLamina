// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Social.hpp"
#include "RakNet.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class RakPeerHelper {

#define AFTER_EXTRA
// Add Member There
public:
    class IPSupportInterface;
#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_RAKPEERHELPER
public:
    class RakPeerHelper& operator=(class RakPeerHelper const &) = delete;
    RakPeerHelper(class RakPeerHelper const &) = delete;
    RakPeerHelper() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_RAKPEERHELPER
#endif
    MCAPI RakPeerHelper(class RakPeerHelper::IPSupportInterface &);
    MCAPI int getConnectionIndex(class Social::GameConnectionInfo const &) const;
    MCAPI unsigned short getIPv4BoundPort() const;
    MCAPI int getIPv4ConnectionIndex() const;
    MCAPI unsigned short getIPv6BoundPort() const;
    MCAPI int getIPv6ConnectionIndex() const;
    MCAPI bool isIPv4Supported() const;
    MCAPI bool isIPv6Supported() const;
    MCAPI enum RakNet::StartupResult peerStartup(class RakNet::RakPeerInterface *, struct ConnectionDefinition const &);
    MCAPI void reset();

protected:

private:
    MCAPI void LogIPSupport();
    MCAPI void _resetToIPv6Only(class gsl::span<struct RakNet::SocketDescriptor, 2>, int &);
    MCAPI enum RakNet::StartupResult _startupInternal(class gsl::not_null<class RakNet::RakPeerInterface *>, struct ConnectionDefinition const &, struct RakNet::SocketDescriptor *, int &, int);

};