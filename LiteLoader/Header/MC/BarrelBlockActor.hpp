// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class BarrelBlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BARRELBLOCKACTOR
public:
    class BarrelBlockActor& operator=(class BarrelBlockActor const &) = delete;
    BarrelBlockActor(class BarrelBlockActor const &) = delete;
    BarrelBlockActor() = delete;
#endif

public:
    /*
    inline void onPlace(class BlockSource & a0){
        void (BarrelBlockActor::*rv)(class BlockSource &);
        *((void**)&rv) = dlsym("?onPlace@BarrelBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource &>(a0));
    }
    inline std::string getName() const{
        std::string (BarrelBlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getName@BarrelBlockActor@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline void playCloseSound(class BlockSource & a0){
        void (BarrelBlockActor::*rv)(class BlockSource &);
        *((void**)&rv) = dlsym("?playCloseSound@BarrelBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource &>(a0));
    }
    inline void playOpenSound(class BlockSource & a0){
        void (BarrelBlockActor::*rv)(class BlockSource &);
        *((void**)&rv) = dlsym("?playOpenSound@BarrelBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource &>(a0));
    }
    inline void startOpen(class Player & a0){
        void (BarrelBlockActor::*rv)(class Player &);
        *((void**)&rv) = dlsym("?startOpen@BarrelBlockActor@@UEAAXAEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class Player &>(a0));
    }
    inline void stopOpen(class Player & a0){
        void (BarrelBlockActor::*rv)(class Player &);
        *((void**)&rv) = dlsym("?stopOpen@BarrelBlockActor@@UEAAXAEAVPlayer@@@Z");
        return (this->*rv)(std::forward<class Player &>(a0));
    }
    */
    MCAPI BarrelBlockActor(class BlockPos const &);

protected:

private:

};