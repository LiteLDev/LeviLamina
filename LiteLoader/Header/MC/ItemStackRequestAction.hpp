// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ItemStackRequestAction {

#define AFTER_EXTRA
// Add Member There
public:
    static inline std::unordered_map<enum ItemStackRequestActionType, std::string> const& getActionTypeMap()
    {
        return actionTypeMap.mMap1;
    }
#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEMSTACKREQUESTACTION
public:
    class ItemStackRequestAction& operator=(class ItemStackRequestAction const &) = delete;
    ItemStackRequestAction(class ItemStackRequestAction const &) = delete;
    ItemStackRequestAction() = delete;
#endif

public:
    /*0*/ virtual ~ItemStackRequestAction();
    /*
    inline class ItemStackRequestActionCraftBase const * getCraftAction() const{
        class ItemStackRequestActionCraftBase const * (ItemStackRequestAction::*rv)() const;
        *((void**)&rv) = dlsym("?getCraftAction@ItemStackRequestAction@@UEBAPEBVItemStackRequestActionCraftBase@@XZ");
        return (this->*rv)();
    }
    inline void postLoadItems_DEPRECATEDASKTYLAING(class BlockPalette & a0, bool a1){
        void (ItemStackRequestAction::*rv)(class BlockPalette &, bool);
        *((void**)&rv) = dlsym("?postLoadItems_DEPRECATEDASKTYLAING@ItemStackRequestAction@@UEAAXAEAVBlockPalette@@_N@Z");
        return (this->*rv)(std::forward<class BlockPalette &>(a0), std::forward<bool>(a1));
    }
    inline int getFilteredStringIndex() const{
        int (ItemStackRequestAction::*rv)() const;
        *((void**)&rv) = dlsym("?getFilteredStringIndex@ItemStackRequestAction@@UEBAHXZ");
        return (this->*rv)();
    }
    inline  ~ItemStackRequestAction(){
         (ItemStackRequestAction::*rv)();
        *((void**)&rv) = dlsym("??1ItemStackRequestAction@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI ItemStackRequestAction(enum ItemStackRequestActionType);
    MCAPI enum ItemStackRequestActionType getActionType() const;
    MCAPI void write(class BinaryStream &) const;
    MCAPI static std::string const getActionTypeName(enum ItemStackRequestActionType);
    MCAPI static std::unique_ptr<class ItemStackRequestAction> read(class ReadOnlyBinaryStream &);

protected:

private:
    MCAPI static class BidirectionalUnorderedMap<enum ItemStackRequestActionType, std::string> const actionTypeMap;

};