// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ResourcePackStack {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_RESOURCEPACKSTACK
public:
    class ResourcePackStack& operator=(class ResourcePackStack const &) = delete;
    ResourcePackStack(class ResourcePackStack const &) = delete;
    ResourcePackStack() = delete;
#endif

public:
    /*0*/ virtual ~ResourcePackStack();
    /*1*/ virtual std::vector<class LoadedResourceData> loadAllVersionsOf(class ResourceLocation const &) const;
    /*2*/ virtual bool loadAllVersionsOf(class ResourceLocation const &, class ResourcePackMergeStrategy &) const;
    /*
    inline  ~ResourcePackStack(){
         (ResourcePackStack::*rv)();
        *((void**)&rv) = dlsym("??1ResourcePackStack@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI void add(class PackInstance, class IResourcePackRepository const &, bool);
    MCAPI void generateAssetSet();
    MCAPI void getSplitStacks(class ResourcePackStack &, class ResourcePackStack &) const;
    MCAPI bool hasCapabilityInStack(class gsl::basic_string_span<char const, -1>) const;
    MCAPI bool hasPlatformLockedContent() const;
    MCAPI void removeDuplicates();
    MCAPI void removeIf(class std::function<bool (class PackInstance const &)> const &);
    MCAPI void removeInvalidPacks();
    MCAPI static std::unique_ptr<class ResourcePackStack> deserialize(class std::basic_istream<char, struct std::char_traits<char>> &, class IResourcePackRepository const &);

protected:

private:
    MCAPI static void _populateDependencies(std::vector<class PackInstance> &, class PackInstance &, class IResourcePackRepository const &, bool);
    MCAPI static class std::map<class Core::PathBuffer<std::string>, class Core::PathBuffer<std::string>, struct std::less<class Core::PathBuffer<std::string>>, class std::allocator<struct std::pair<class Core::PathBuffer<std::string> const, class Core::PathBuffer<std::string>>>> mUpgradePathMap;

};