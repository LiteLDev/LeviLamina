// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Agent : public Mob {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_AGENT
public:
    class Agent& operator=(class Agent const &) = delete;
    Agent(class Agent const &) = delete;
    Agent() = delete;
#endif

public:
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*14*/ virtual ~Agent();
    /*40*/ virtual void __unk_vfn_40();
    /*43*/ virtual void teleportTo(class Vec3 const &, bool, int, int);
    /*48*/ virtual void normalTick();
    /*59*/ virtual bool isInvisible() const;
    /*60*/ virtual bool canShowNameTag() const;
    /*61*/ virtual void __unk_vfn_61();
    /*65*/ virtual std::string getFormattedNameTag() const;
    /*68*/ virtual void __unk_vfn_68();
    /*82*/ virtual void __unk_vfn_82();
    /*88*/ virtual void __unk_vfn_88();
    /*94*/ virtual bool isPickable();
    /*95*/ virtual void __unk_vfn_95();
    /*98*/ virtual void __unk_vfn_98();
    /*105*/ virtual void __unk_vfn_105();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*109*/ virtual void __unk_vfn_109();
    /*141*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*161*/ virtual void setCarriedItem(class ItemStack const &);
    /*181*/ virtual void __unk_vfn_181();
    /*193*/ virtual bool canBePulledIntoVehicle() const;
    /*195*/ virtual void __unk_vfn_195();
    /*211*/ virtual bool canBeAffected(class MobEffectInstance const &) const;
    /*220*/ virtual void __unk_vfn_220();
    /*221*/ virtual void __unk_vfn_221();
    /*228*/ virtual bool isWorldBuilder() const;
    /*230*/ virtual bool isAdventure() const;
    /*246*/ virtual void __unk_vfn_246();
    /*249*/ virtual void __unk_vfn_249();
    /*250*/ virtual void kill();
    /*259*/ virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /*261*/ virtual void __unk_vfn_261();
    /*262*/ virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    /*269*/ virtual void __unk_vfn_269();
    /*278*/ virtual void __unk_vfn_278();
    /*279*/ virtual void knockback(class Actor *, int, float, float, float, float, float);
    /*280*/ virtual void __unk_vfn_280();
    /*291*/ virtual void travel(float, float, float);
    /*294*/ virtual void aiStep();
    /*303*/ virtual void __unk_vfn_303();
    /*304*/ virtual void __unk_vfn_304();
    /*307*/ virtual void __unk_vfn_307();
    /*311*/ virtual void __unk_vfn_311();
    /*321*/ virtual void __unk_vfn_321();
    /*337*/ virtual bool createAIGoals();
    /*338*/ virtual void __unk_vfn_338();
    /*344*/ virtual bool canExistWhenDisallowMob() const;
    /*345*/ virtual void __unk_vfn_345();
    /*350*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*359*/ virtual void __unk_vfn_359();
    /*
    inline bool isTargetable() const{
        bool (Agent::*rv)() const;
        *((void**)&rv) = dlsym("?isTargetable@Agent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool interactPreventDefault(){
        bool (Agent::*rv)();
        *((void**)&rv) = dlsym("?interactPreventDefault@Agent@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool getAlwaysShowNameTag() const{
        bool (Agent::*rv)() const;
        *((void**)&rv) = dlsym("?getAlwaysShowNameTag@Agent@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool breaksFallingBlocks() const{
        bool (Agent::*rv)() const;
        *((void**)&rv) = dlsym("?breaksFallingBlocks@Agent@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI Agent(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI float getMoveSpeedScalar() const;
    MCAPI int getSelectedSlot() const;
    MCAPI bool isValidSlotNum(int);
    MCAPI void setMoveTarget(class Vec3 const &);
    MCAPI void setNameTagFromOwner(class Player const &);
    MCAPI void startCommandMode();
    MCAPI void stopCommandMode();
    MCAPI bool swingAnimationCompleted();
    MCAPI void swingArm();
    MCAPI void tryFireCreateEvent(class Player &);
    MCAPI static class Vec3 roundTeleportPos(class Vec3 const &);
    MCAPI static class Agent * tryGetFromEntity(class EntityContext &, bool);

protected:

private:
    MCAPI class ContainerComponent * _getContainerComponent();

};