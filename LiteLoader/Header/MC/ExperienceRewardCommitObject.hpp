// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ExperienceRewardCommitObject {

#define AFTER_EXTRA

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_EXPERIENCEREWARDCOMMITOBJECT
public:
    class ExperienceRewardCommitObject& operator=(class ExperienceRewardCommitObject const &) = delete;
    ExperienceRewardCommitObject(class ExperienceRewardCommitObject const &) = delete;
    ExperienceRewardCommitObject() = delete;
#endif

public:
    /*0*/ virtual ~ExperienceRewardCommitObject();
    /*1*/ virtual void __unk_vfn_1();
    /*2*/ virtual void __unk_vfn_2();
    /*3*/ virtual void commit(class ContainerScreenContext const &);
    /*
    inline bool canCommit(class ContainerScreenContext const & a0) const{
        bool (ExperienceRewardCommitObject::*rv)(class ContainerScreenContext const &) const;
        *((void**)&rv) = dlsym("?canCommit@ExperienceRewardCommitObject@@UEBA_NAEBVContainerScreenContext@@@Z");
        return (this->*rv)(std::forward<class ContainerScreenContext const &>(a0));
    }
    inline bool append(class ContainerValidationCommitObject * a0){
        bool (ExperienceRewardCommitObject::*rv)(class ContainerValidationCommitObject *);
        *((void**)&rv) = dlsym("?append@ExperienceRewardCommitObject@@UEAA_NPEAVContainerValidationCommitObject@@@Z");
        return (this->*rv)(std::forward<class ContainerValidationCommitObject *>(a0));
    }
    */
    MCAPI ExperienceRewardCommitObject(int);

protected:

private:

};