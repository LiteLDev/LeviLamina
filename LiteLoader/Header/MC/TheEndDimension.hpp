// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class TheEndDimension {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_THEENDDIMENSION
public:
    class TheEndDimension& operator=(class TheEndDimension const &) = delete;
    TheEndDimension(class TheEndDimension const &) = delete;
    TheEndDimension() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_THEENDDIMENSION
    MCVAPI void _upgradeOldLimboEntity(class CompoundTag &, enum LimboEntitiesVersion);
    MCVAPI std::unique_ptr<class ChunkSource> _wrapStorageForVersionCompatibility(std::unique_ptr<class ChunkSource>, enum StorageVersion);
    MCVAPI std::unique_ptr<class WorldGenerator> createGenerator();
    MCVAPI void deserialize(class CompoundTag const &);
    MCVAPI void fixWallChunk(class ChunkSource &, class LevelChunk &);
    MCVAPI short getCloudHeight() const;
    MCVAPI int getDefaultBiome() const;
    MCVAPI class BlockPos getSpawnPos() const;
    MCVAPI int getSpawnYPosition() const;
    MCVAPI float getSunIntensity(float, class Vec3 const &, float) const;
    MCVAPI float getTimeOfDay(int, float) const;
    MCVAPI bool hasGround() const;
    MCVAPI void init();
    MCVAPI bool isDay() const;
    MCVAPI bool isFoggyAt(int, int) const;
    MCVAPI bool isNaturalDimension() const;
    MCVAPI bool isValidSpawn(int, int) const;
    MCVAPI bool levelChunkNeedsUpgrade(class LevelChunk const &) const;
    MCVAPI bool mayRespawnViaBed() const;
    MCVAPI void serialize(class CompoundTag &) const;
    MCVAPI void startLeaveGame();
    MCVAPI void tick();
    MCVAPI class Vec3 translatePosAcrossDimension(class Vec3 const &, class AutomaticID<class Dimension, int>) const;
    MCVAPI void upgradeLevelChunk(class ChunkSource &, class LevelChunk &, class LevelChunk &);
#endif
    MCAPI TheEndDimension(class Level &, class Scheduler &);
    MCAPI static float const AMBIENT_MULTIPLIER;

protected:

private:
    MCAPI static std::unique_ptr<class StructureFeatureRegistry> makeStructureFeatures(class Dimension &, unsigned int);

};