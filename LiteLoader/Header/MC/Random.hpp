// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Random {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_RANDOM
public:
    class Random& operator=(class Random const &) = delete;
    Random(class Random const &) = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_RANDOM
    MCVAPI void consumeCount(unsigned int);
    MCVAPI std::unique_ptr<class IRandom> fork();
    MCVAPI bool nextBoolean();
    MCVAPI double nextDouble();
    MCVAPI float nextFloat();
    MCVAPI double nextGaussianDouble();
    MCVAPI int nextInt(int);
    MCVAPI int nextInt();
    MCVAPI __int64 nextLong();
    MCVAPI ~Random();
#endif
    MCAPI Random(unsigned int, bool);
    MCAPI Random();
    MCAPI float nextFloat(float, float);
    MCAPI float nextGaussianFloat();
    MCAPI int nextGaussianInt(int);
    MCAPI int nextInt(int, int);
    MCAPI int nextIntInclusive(int, int);
    MCAPI static class Random & getThreadLocal();

protected:

private:
    MCAPI static class Bedrock::Threading::ThreadLocalObject<class Random, class std::allocator<class Random>> mThreadLocalRandom;

};