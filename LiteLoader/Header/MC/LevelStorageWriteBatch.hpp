// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class LevelStorageWriteBatch {

#define AFTER_EXTRA
// Add Member There
public:
struct BatchEntry {
    BatchEntry() = delete;
    BatchEntry(BatchEntry const&) = delete;
    BatchEntry(BatchEntry const&&) = delete;
};

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_LEVELSTORAGEWRITEBATCH
public:
    class LevelStorageWriteBatch& operator=(class LevelStorageWriteBatch const &) = delete;
    LevelStorageWriteBatch(class LevelStorageWriteBatch const &) = delete;
#endif

public:
    /*0*/ virtual ~LevelStorageWriteBatch();
    /*1*/ virtual void putKey(std::string const &, class gsl::basic_string_span<char const, -1>, enum DBHelpers::Category);
    /*2*/ virtual void putKey(std::string const &, std::string const &, enum DBHelpers::Category);
    /*3*/ virtual void putKey(std::string const &, std::string &&, enum DBHelpers::Category);
    /*4*/ virtual void putKey(std::string const &, class std::shared_ptr<std::string>, enum DBHelpers::Category);
    /*5*/ virtual void deleteKey(std::string const &, enum DBHelpers::Category);
    /*6*/ virtual void flush(class LevelStorage &);
    /*
    inline  ~LevelStorageWriteBatch(){
         (LevelStorageWriteBatch::*rv)();
        *((void**)&rv) = dlsym("??1LevelStorageWriteBatch@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI LevelStorageWriteBatch();
    MCAPI void addFlushCallback(class std::function<void (void)>);
    MCAPI void clear();
    MCAPI void erase(class std::_Tree_const_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<std::string const, struct LevelStorageWriteBatch::BatchEntry>>>> const &);
    MCAPI class std::_Tree_const_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<std::string const, struct LevelStorageWriteBatch::BatchEntry>>>> find(std::string const &) const;
    MCAPI class std::_Tree_iterator<class std::_Tree_val<struct std::_Tree_simple_types<struct std::pair<std::string const, struct LevelStorageWriteBatch::BatchEntry>>>> find(std::string const &);

protected:

private:

};