// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Social.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class LocalConnector {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_LOCALCONNECTOR
public:
    class LocalConnector& operator=(class LocalConnector const &) = delete;
    LocalConnector(class LocalConnector const &) = delete;
    LocalConnector() = delete;
#endif

public:
    /*0*/ virtual ~LocalConnector();
    /*1*/ virtual void __unk_vfn_1();
    /*2*/ virtual void __unk_vfn_2();
    /*3*/ virtual void __unk_vfn_3();
    /*4*/ virtual void __unk_vfn_4();
    /*5*/ virtual class Social::GameConnectionInfo const & getConnectedGameInfo() const;
    /*
    inline bool isIPv6Supported() const{
        bool (LocalConnector::*rv)() const;
        *((void**)&rv) = dlsym("?isIPv6Supported@LocalConnector@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isIPv4Supported() const{
        bool (LocalConnector::*rv)() const;
        *((void**)&rv) = dlsym("?isIPv4Supported@LocalConnector@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline unsigned short getIPv4Port() const{
        unsigned short (LocalConnector::*rv)() const;
        *((void**)&rv) = dlsym("?getIPv4Port@LocalConnector@@UEBAGXZ");
        return (this->*rv)();
    }
    inline unsigned short getIPv6Port() const{
        unsigned short (LocalConnector::*rv)() const;
        *((void**)&rv) = dlsym("?getIPv6Port@LocalConnector@@UEBAGXZ");
        return (this->*rv)();
    }
    inline unsigned short getPort() const{
        unsigned short (LocalConnector::*rv)() const;
        *((void**)&rv) = dlsym("?getPort@LocalConnector@@UEBAGXZ");
        return (this->*rv)();
    }
    inline void removeConnectionStateListener(class Connector::ConnectionStateListener * a0){
        void (LocalConnector::*rv)(class Connector::ConnectionStateListener *);
        *((void**)&rv) = dlsym("?removeConnectionStateListener@LocalConnector@@UEAAXPEAVConnectionStateListener@Connector@@@Z");
        return (this->*rv)(std::forward<class Connector::ConnectionStateListener *>(a0));
    }
    inline void startNatPunchingClient(std::string const & a0, unsigned short a1){
        void (LocalConnector::*rv)(std::string const &, unsigned short);
        *((void**)&rv) = dlsym("?startNatPunchingClient@LocalConnector@@UEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@G@Z");
        return (this->*rv)(std::forward<std::string const &>(a0), std::forward<unsigned short>(a1));
    }
    inline void addConnectionStateListener(class Connector::ConnectionStateListener * a0){
        void (LocalConnector::*rv)(class Connector::ConnectionStateListener *);
        *((void**)&rv) = dlsym("?addConnectionStateListener@LocalConnector@@UEAAXPEAVConnectionStateListener@Connector@@@Z");
        return (this->*rv)(std::forward<class Connector::ConnectionStateListener *>(a0));
    }
    inline void setupNatPunch(bool a0){
        void (LocalConnector::*rv)(bool);
        *((void**)&rv) = dlsym("?setupNatPunch@LocalConnector@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline std::string getLocalIp(){
        std::string (LocalConnector::*rv)();
        *((void**)&rv) = dlsym("?getLocalIp@LocalConnector@@UEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline std::vector<struct RakNet::SystemAddress> getRefinedLocalIps() const{
        std::vector<struct RakNet::SystemAddress> (LocalConnector::*rv)() const;
        *((void**)&rv) = dlsym("?getRefinedLocalIps@LocalConnector@@UEBA?AV?$vector@USystemAddress@RakNet@@V?$allocator@USystemAddress@RakNet@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    inline std::vector<std::string> getLocalIps() const{
        std::vector<std::string> (LocalConnector::*rv)() const;
        *((void**)&rv) = dlsym("?getLocalIps@LocalConnector@@UEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ");
        return (this->*rv)();
    }
    inline struct Connector::NatPunchInfo getNatPunchInfo() const{
        struct Connector::NatPunchInfo (LocalConnector::*rv)() const;
        *((void**)&rv) = dlsym("?getNatPunchInfo@LocalConnector@@UEBA?AUNatPunchInfo@Connector@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI LocalConnector(class LocalConnector::ConnectionCallbacks &, class NetworkIdentifier const &);
    MCAPI void disconnect();
    MCAPI void host(class NetworkIdentifier const &);
    MCAPI void runEvents();

protected:

private:
    MCAPI static class LocalConnectivitySystem sLocalConnectivitySystem;

};