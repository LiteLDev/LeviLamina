// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ScriptObject.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ScriptActor : public ScriptObject {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCRIPTACTOR
public:
    class ScriptActor& operator=(class ScriptActor const &) = delete;
    ScriptActor(class ScriptActor const &) = delete;
    ScriptActor() = delete;
#endif

public:
    /*0*/ virtual ~ScriptActor();
    /*4*/ virtual void __unk_vfn_4();
    /*5*/ virtual class Scripting::Result<void> setNameTag(std::string const &) const;
    /*6*/ virtual class Scripting::Result<bool> getSneaking() const;
    /*7*/ virtual class Scripting::Result<void> setSneaking(bool) const;
    /*
    inline class Scripting::Result<std::string> getNameTag() const{
        class Scripting::Result<std::string> (ScriptActor::*rv)() const;
        *((void**)&rv) = dlsym("?getNameTag@ScriptActor@@UEBA?AV?$Result@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Scripting@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI ScriptActor(class ScriptActor &&);
    MCAPI ScriptActor(class Actor const &, class Scripting::WeakLifetimeScope const &);
    MCAPI class Scripting::Result<void> addEffect(class ScriptEffectType const &, int, int, bool);
    MCAPI class Scripting::Result<bool> addTag(std::string const &) const;
    MCAPI class Scripting::Result<class Scripting::StrongTypedObjectHandle<class ScriptBlock>> getBlockFromViewVector(class Scripting::WeakLifetimeScope, class std::optional<struct ScriptBlockRaycastOptions> const &) const;
    MCAPI class Scripting::Result<float> getBodyRotation() const;
    MCAPI class Scripting::WeakTypedObjectHandle<class ScriptActorComponent> getComponent(class Scripting::WeakLifetimeScope, class std::unordered_map<std::string, std::unique_ptr<class IComponentFactory>, struct std::hash<std::string>, struct std::equal_to<std::string>, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class IComponentFactory>>>> const &, std::string const &);
    MCAPI std::vector<class Scripting::WeakTypedObjectHandle<class ScriptActorComponent>> getComponents(class Scripting::WeakLifetimeScope, class std::unordered_map<std::string, std::unique_ptr<class IComponentFactory>, struct std::hash<std::string>, struct std::equal_to<std::string>, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class IComponentFactory>>>> const &);
    MCAPI class Scripting::Result<class Scripting::StrongTypedObjectHandle<class ScriptDimension>> getDimension();
    MCAPI class Scripting::Result<class Scripting::StrongTypedObjectHandle<class ScriptMobEffectInstance>> getEffect(class ScriptEffectType const &);
    MCAPI class Scripting::Result<std::vector<class Scripting::StrongTypedObjectHandle<class ScriptActor>>> getEntitiesFromViewVector(class Scripting::WeakLifetimeScope, class std::optional<struct ScriptEntityRaycastOptions> const &) const;
    MCAPI class Scripting::Result<class Vec3> getHeadLocation() const;
    MCAPI class Scripting::Result<std::string> getId() const;
    MCAPI class Scripting::Result<class Vec3> getLocation() const;
    MCAPI class Scripting::Result<std::vector<std::string>> getTags() const;
    MCAPI class Scripting::Result<class Scripting::StrongTypedObjectHandle<class ScriptActor>> getTarget();
    MCAPI class Scripting::Result<class ScriptVector> getVelocity() const;
    MCAPI class Scripting::Result<class ScriptVector> getViewVector() const;
    MCAPI class WeakRefT<struct EntityRefTraits> getWeakEntity() const;
    MCAPI bool hasComponent(class Scripting::WeakLifetimeScope, class std::unordered_map<std::string, std::unique_ptr<class IComponentFactory>, struct std::hash<std::string>, struct std::equal_to<std::string>, class std::allocator<struct std::pair<std::string const, std::unique_ptr<class IComponentFactory>>>> const &, std::string const &);
    MCAPI class Scripting::Result<bool> hasTag(std::string const &) const;
    MCAPI class Scripting::Result<void> kill() const;
    MCAPI class ScriptActor & operator=(class ScriptActor &&);
    MCAPI class Scripting::Result<bool> removeTag(std::string const &) const;
    MCAPI class Scripting::Result<struct Scripting::JSON> runCommand(struct Scripting::ContextConfig const &, std::string const &);
    MCAPI class Scripting::Result<void> setTarget(class ScriptActor &);
    MCAPI class Scripting::Result<void> setVelocity(class ScriptVector const &) const;
    MCAPI class Scripting::Result<void> teleport(class Vec3 const &, class ScriptDimension &, float, float);
    MCAPI class Scripting::Result<void> teleportFacing(class Vec3 const &, class ScriptDimension &, class Vec3 const &);
    MCAPI class Scripting::Result<void> triggerEvent(std::string const &) const;
    MCAPI class Actor * tryGetActor() const;
    MCAPI static void destroyHandle(struct ActorUniqueID const &, class Scripting::WeakLifetimeScope const &);
    MCAPI static class Scripting::StrongTypedObjectHandle<class ScriptActor> getHandle(class Actor const *, class Scripting::WeakLifetimeScope const &);
    MCAPI static class Scripting::StrongTypedObjectHandle<class ScriptActor> getHandle(class StackRefResultT<struct EntityRefTraits>, class Scripting::WeakLifetimeScope const &);
    MCAPI static class Actor * tryGetActor(struct Scripting::TypedObjectHandle<class ScriptActor> &, class Scripting::WeakLifetimeScope const &);

protected:
    MCAPI class Scripting::Result<struct Scripting::JSON> _runCommand(std::string const &, std::string const &, std::unique_ptr<class CommandOrigin>);

private:

};