// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class VarIntDataOutput {

#define AFTER_EXTRA
// Add Member There
public:
    BinaryStream* stream;

    // Manually delete it after you finish using it
    static VarIntDataOutput* newVarIntDataOutput(BinaryStream* bs) {
        struct VarIntDataOutput_C {
            __int64 vtbl;
            BinaryStream* stream;
        }* CStruct      = new VarIntDataOutput_C();
        CStruct->stream = bs;
        CStruct->vtbl   = (__int64)dlsym("??_7VarIntDataOutput@@6B@");
        return (VarIntDataOutput*)CStruct;
    };
#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_VARINTDATAOUTPUT
public:
    class VarIntDataOutput& operator=(class VarIntDataOutput const &) = delete;
    VarIntDataOutput(class VarIntDataOutput const &) = delete;
    VarIntDataOutput() = delete;
#endif

public:
    /*0*/ virtual ~VarIntDataOutput();
    /*1*/ virtual void __unk_vfn_1();
    /*2*/ virtual void __unk_vfn_2();
    /*3*/ virtual void writeFloat(float);
    /*4*/ virtual void writeDouble(double);
    /*5*/ virtual void writeByte(char);
    /*6*/ virtual void writeShort(short);
    /*7*/ virtual void writeInt(int);
    /*8*/ virtual void writeLongLong(__int64);
    /*9*/ virtual void writeBytes(void const *, unsigned __int64);
    /*
    inline void writeString(class gsl::basic_string_span<char const, -1> a0){
        void (VarIntDataOutput::*rv)(class gsl::basic_string_span<char const, -1>);
        *((void**)&rv) = dlsym("?writeString@VarIntDataOutput@@UEAAXV?$basic_string_span@$$CBD$0?0@gsl@@@Z");
        return (this->*rv)(std::forward<class gsl::basic_string_span<char const, -1>>(a0));
    }
    inline void writeLongString(class gsl::basic_string_span<char const, -1> a0){
        void (VarIntDataOutput::*rv)(class gsl::basic_string_span<char const, -1>);
        *((void**)&rv) = dlsym("?writeLongString@VarIntDataOutput@@UEAAXV?$basic_string_span@$$CBD$0?0@gsl@@@Z");
        return (this->*rv)(std::forward<class gsl::basic_string_span<char const, -1>>(a0));
    }
    */

protected:

private:

};