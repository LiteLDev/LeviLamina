// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Shulker : public Mob {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SHULKER
public:
    class Shulker& operator=(class Shulker const &) = delete;
    Shulker(class Shulker const &) = delete;
    Shulker() = delete;
#endif

public:
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*14*/ virtual ~Shulker();
    /*19*/ virtual void setPos(class Vec3 const &);
    /*40*/ virtual void __unk_vfn_40();
    /*48*/ virtual void normalTick();
    /*58*/ virtual bool isInWall() const;
    /*61*/ virtual void __unk_vfn_61();
    /*68*/ virtual void __unk_vfn_68();
    /*80*/ virtual float getShadowRadius() const;
    /*82*/ virtual void __unk_vfn_82();
    /*88*/ virtual void __unk_vfn_88();
    /*95*/ virtual void __unk_vfn_95();
    /*98*/ virtual void __unk_vfn_98();
    /*105*/ virtual void __unk_vfn_105();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*109*/ virtual void __unk_vfn_109();
    /*111*/ virtual bool canAttack(class Actor *, bool) const;
    /*131*/ virtual bool shouldRender() const;
    /*134*/ virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    /*142*/ virtual float getPickRadius();
    /*181*/ virtual void __unk_vfn_181();
    /*195*/ virtual void __unk_vfn_195();
    /*220*/ virtual void __unk_vfn_220();
    /*221*/ virtual void __unk_vfn_221();
    /*246*/ virtual void __unk_vfn_246();
    /*249*/ virtual void __unk_vfn_249();
    /*259*/ virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    /*261*/ virtual void __unk_vfn_261();
    /*262*/ virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    /*265*/ virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    /*266*/ virtual void addAdditionalSaveData(class CompoundTag &);
    /*269*/ virtual void __unk_vfn_269();
    /*277*/ virtual void _onSizeUpdated();
    /*278*/ virtual void __unk_vfn_278();
    /*291*/ virtual void travel(float, float, float);
    /*294*/ virtual void aiStep();
    /*299*/ virtual bool checkSpawnRules(bool);
    /*307*/ virtual void __unk_vfn_307();
    /*308*/ virtual float getMaxHeadXRot();
    /*311*/ virtual void __unk_vfn_311();
    /*316*/ virtual int getArmorValue() const;
    /*345*/ virtual void __unk_vfn_345();
    /*350*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*359*/ virtual void __unk_vfn_359();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SHULKER
    MCVAPI bool breaksFallingBlocks() const;
    MCVAPI bool isLeashableType();
    MCVAPI bool useNewAi() const;
#endif
    MCAPI Shulker(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI static class std::shared_ptr<class AttributeModifier> COVERED_ARMOR_MODIFIER;
    MCAPI static class mce::UUID const COVERED_ARMOR_MODIFIER_UUID;
    MCAPI static void setShulkerAttachPos(class SynchedActorData &, class BlockPos const &);

protected:
    MCAPI static void _setPeekAmount(class SynchedActorData &, int);

private:
    MCAPI void _calculateBB();
    MCAPI bool _isPosOccupiedByOtherShulker(class BlockPos) const;
    MCAPI bool _isValidAttach(class BlockPos, unsigned char);
    MCAPI void _setAttachFace(unsigned char);
    MCAPI bool _tryAttachingToNeighbouringFaces(class BlockPos);
    MCAPI void _trySpawnShulker();
    MCAPI bool _tryTeleportSomewhere();

};