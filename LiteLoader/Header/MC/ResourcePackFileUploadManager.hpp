// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"
#include "Json.hpp"
#include "FileUploadManager.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ResourcePackFileUploadManager : public FileUploadManager {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_RESOURCEPACKFILEUPLOADMANAGER
public:
    class ResourcePackFileUploadManager& operator=(class ResourcePackFileUploadManager const &) = delete;
    ResourcePackFileUploadManager(class ResourcePackFileUploadManager const &) = delete;
    ResourcePackFileUploadManager() = delete;
#endif

public:
    /*0*/ virtual ~ResourcePackFileUploadManager();
    /*2*/ virtual void uploadFileToRealmStorage(std::string const &, class Core::Path const &, int, std::string const &);
    /*
    inline  ~ResourcePackFileUploadManager(){
         (ResourcePackFileUploadManager::*rv)();
        *((void**)&rv) = dlsym("??1ResourcePackFileUploadManager@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI ResourcePackFileUploadManager(class TaskGroup &, class std::shared_ptr<class IFileChunkUploader>);
    MCAPI void uploadResourcePack(std::string const &, class ResourceLocation const &, bool, bool, enum PackType);

protected:

private:
    MCAPI void _uploadPackToRealmStorage(std::string const &, class Core::Path const &, int, std::string const &);
    MCAPI void _uploadResourcePackFolder(std::string const &, class ResourceLocation const &, class Core::Path const &, class Json::Value const &);

};