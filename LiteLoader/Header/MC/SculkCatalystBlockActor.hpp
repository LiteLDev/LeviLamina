// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class SculkCatalystBlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCULKCATALYSTBLOCKACTOR
public:
    class SculkCatalystBlockActor& operator=(class SculkCatalystBlockActor const &) = delete;
    SculkCatalystBlockActor(class SculkCatalystBlockActor const &) = delete;
    SculkCatalystBlockActor() = delete;
#endif

public:
    /*
    inline class GameEvents::PositionSource const & getPositionSource() const{
        class GameEvents::PositionSource const & (SculkCatalystBlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getPositionSource@SculkCatalystBlockActor@@UEBAAEBVPositionSource@GameEvents@@XZ");
        return (this->*rv)();
    }
    inline unsigned int getRange() const{
        unsigned int (SculkCatalystBlockActor::*rv)() const;
        *((void**)&rv) = dlsym("?getRange@SculkCatalystBlockActor@@UEBAIXZ");
        return (this->*rv)();
    }
    inline void handleGameEvent(class GameEvent const & a0, class BlockPos const & a1, class Actor * a2, class BlockSource & a3){
        void (SculkCatalystBlockActor::*rv)(class GameEvent const &, class BlockPos const &, class Actor *, class BlockSource &);
        *((void**)&rv) = dlsym("?handleGameEvent@SculkCatalystBlockActor@@UEAAXAEBVGameEvent@@AEBVBlockPos@@PEAVActor@@AEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class GameEvent const &>(a0), std::forward<class BlockPos const &>(a1), std::forward<class Actor *>(a2), std::forward<class BlockSource &>(a3));
    }
    inline void load(class Level & a0, class CompoundTag const & a1, class DataLoadHelper & a2){
        void (SculkCatalystBlockActor::*rv)(class Level &, class CompoundTag const &, class DataLoadHelper &);
        *((void**)&rv) = dlsym("?load@SculkCatalystBlockActor@@UEAAXAEAVLevel@@AEBVCompoundTag@@AEAVDataLoadHelper@@@Z");
        return (this->*rv)(std::forward<class Level &>(a0), std::forward<class CompoundTag const &>(a1), std::forward<class DataLoadHelper &>(a2));
    }
    inline void onRemoved(class BlockSource & a0){
        void (SculkCatalystBlockActor::*rv)(class BlockSource &);
        *((void**)&rv) = dlsym("?onRemoved@SculkCatalystBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource &>(a0));
    }
    inline bool save(class CompoundTag & a0) const{
        bool (SculkCatalystBlockActor::*rv)(class CompoundTag &) const;
        *((void**)&rv) = dlsym("?save@SculkCatalystBlockActor@@UEBA_NAEAVCompoundTag@@@Z");
        return (this->*rv)(std::forward<class CompoundTag &>(a0));
    }
    inline void tick(class BlockSource & a0){
        void (SculkCatalystBlockActor::*rv)(class BlockSource &);
        *((void**)&rv) = dlsym("?tick@SculkCatalystBlockActor@@UEAAXAEAVBlockSource@@@Z");
        return (this->*rv)(std::forward<class BlockSource &>(a0));
    }
    */
    MCAPI SculkCatalystBlockActor(class BlockPos const &);
    MCAPI class SculkSpreader & getSculkSpreader();
    MCAPI static enum BlockActorType const TypeId;
    MCAPI static std::string const TypeString;

protected:

private:

};