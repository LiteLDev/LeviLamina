// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Amplifier {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_AMPLIFIER
public:
    class Amplifier& operator=(class Amplifier const &) = delete;
    Amplifier(class Amplifier const &) = delete;
    Amplifier() = delete;
#endif

public:
    /*0*/ virtual ~Amplifier();
    /*
    inline bool shouldBuff(int a0, int a1) const{
        bool (Amplifier::*rv)(int, int) const;
        *((void**)&rv) = dlsym("?shouldBuff@Amplifier@@UEBA_NHH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1));
    }
    inline int getTickInterval(int a0) const{
        int (Amplifier::*rv)(int) const;
        *((void**)&rv) = dlsym("?getTickInterval@Amplifier@@UEBAHH@Z");
        return (this->*rv)(std::forward<int>(a0));
    }
    inline float getAmount(int a0, float a1) const{
        float (Amplifier::*rv)(int, float) const;
        *((void**)&rv) = dlsym("?getAmount@Amplifier@@UEBAMHM@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<float>(a1));
    }
    */

protected:

private:

};