// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class FoodItemComponentLegacy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_FOODITEMCOMPONENTLEGACY
public:
    class FoodItemComponentLegacy& operator=(class FoodItemComponentLegacy const &) = delete;
    FoodItemComponentLegacy(class FoodItemComponentLegacy const &) = delete;
    FoodItemComponentLegacy() = delete;
#endif

public:
    /*0*/ virtual ~FoodItemComponentLegacy();
    /*1*/ virtual void __unk_vfn_1();
    /*2*/ virtual void __unk_vfn_2();
    /*3*/ virtual void __unk_vfn_3();
    /*4*/ virtual class Item const * eatItem(class ItemStack &, class Actor &, class Level &);
    /*5*/ virtual bool use(class ItemStack &, class Player &);
    /*6*/ virtual class Item const * useTimeDepleted(class ItemStack &, class Player &, class Level &);
    /*
    inline float getSaturationModifier() const{
        float (FoodItemComponentLegacy::*rv)() const;
        *((void**)&rv) = dlsym("?getSaturationModifier@FoodItemComponentLegacy@@UEBAMXZ");
        return (this->*rv)();
    }
    inline int getNutrition() const{
        int (FoodItemComponentLegacy::*rv)() const;
        *((void**)&rv) = dlsym("?getNutrition@FoodItemComponentLegacy@@UEBAHXZ");
        return (this->*rv)();
    }
    inline bool canAlwaysEat() const{
        bool (FoodItemComponentLegacy::*rv)() const;
        *((void**)&rv) = dlsym("?canAlwaysEat@FoodItemComponentLegacy@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI FoodItemComponentLegacy(class Item &);
    MCAPI std::unique_ptr<class CompoundTag> buildNetworkTag() const;
    MCAPI bool init(class Json::Value &, class SemVersion const &);
    MCAPI static class Json::Value initializeFromNetwork(class CompoundTag const &);

protected:

private:
    MCAPI void _applyEatEffects(class ItemStack const &, class Actor &, class Level &);
    MCAPI void _loadEffects(class Json::Value &);
    MCAPI void _loadRemoveEffects(class Json::Value &);

};