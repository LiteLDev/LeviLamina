// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class VibrationListener {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_VIBRATIONLISTENER
public:
    class VibrationListener& operator=(class VibrationListener const &) = delete;
    VibrationListener(class VibrationListener const &) = delete;
    VibrationListener() = delete;
#endif

public:
    /*0*/ virtual ~VibrationListener();
    /*1*/ virtual void handleGameEvent(class GameEvent const &, class BlockPos const &, class Actor *, class BlockSource &);
    /*
    inline unsigned int getRange() const{
        unsigned int (VibrationListener::*rv)() const;
        *((void**)&rv) = dlsym("?getRange@VibrationListener@@UEBAIXZ");
        return (this->*rv)();
    }
    inline class GameEvents::PositionSource const & getPositionSource() const{
        class GameEvents::PositionSource const & (VibrationListener::*rv)() const;
        *((void**)&rv) = dlsym("?getPositionSource@VibrationListener@@UEBAAEBVPositionSource@GameEvents@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI VibrationListener(std::unique_ptr<class VibrationListenerConfig> &&, class GameEvents::PositionSource, unsigned int, enum VibrationListener::OwnerType);
    MCAPI class GameEvent const & getGameEvent() const;
    MCAPI void tick(class BlockSource &);
    MCAPI static int getGameEventFrequency(class GameEvent const &);

protected:

private:
    MCAPI void _sendSignal(class BlockSource &, class GameEvent const &, class Actor const *, class BlockPos const &, class GameEvents::PositionSource const &);

};