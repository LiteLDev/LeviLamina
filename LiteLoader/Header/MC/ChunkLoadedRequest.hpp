// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ChunkLoadedRequest {

#define AFTER_EXTRA
// Add Member There
    char filler[128];

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CHUNKLOADEDREQUEST
public:
    class ChunkLoadedRequest& operator=(class ChunkLoadedRequest const &) = delete;
    ChunkLoadedRequest(class ChunkLoadedRequest const &) = delete;
    ChunkLoadedRequest() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_CHUNKLOADEDREQUEST
#endif
    MCAPI ChunkLoadedRequest(class ChunkLoadedRequest &&);
    MCAPI ChunkLoadedRequest(struct Bounds const &, std::unique_ptr<class IRequestAction>, bool, bool);
    MCAPI ChunkLoadedRequest(std::string const &, std::unique_ptr<class IRequestAction>, bool);
    MCAPI enum ChunksLoadedStatus areAllChunksLoaded(class Dimension &, struct Tick) const;
    MCAPI bool areaContainsChunk(class LevelChunk const &) const;
    MCAPI void executeAction(class ServerLevel &, class Dimension &);
    MCAPI std::string const & getSerializationId() const;
    MCAPI bool isValid() const;
    MCAPI class CompoundTag serialize(enum ChunkRequestListType);
    MCAPI void setSerializationId(std::string const &);
    MCAPI bool tickingAreaMatches(std::string const &) const;
    MCAPI ~ChunkLoadedRequest();
    MCAPI static bool isValidTag(class CompoundTag const &);
    MCAPI static struct DeserializedChunkLoadedRequest load(std::string const &, class CompoundTag const &, class ICommandOriginLoader &, std::string const &);

protected:

private:
    MCAPI class ITickingAreaView const * _getTickingArea(class Dimension const &) const;

};