// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "CommandOutputParameter.hpp"

#undef BEFORE_EXTRA

class CommandOutput {

#define AFTER_EXTRA
// Add Member There
public:
	LIAPI void addMessage(std::string str);
	LIAPI void success(const string& str);
	LIAPI void error(const string& str);

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMMANDOUTPUT
public:
    class CommandOutput& operator=(class CommandOutput const &) = delete;
    CommandOutput() = delete;
#endif

public:
    MCAPI CommandOutput(class CommandOutput const &);
    MCAPI CommandOutput(enum CommandOutputType);
    MCAPI void addToResultList(std::string const &, std::string const &);
    MCAPI void addToResultList(std::string const &, class Actor const &);
    MCAPI bool empty() const;
    MCAPI void error(std::string const &, std::vector<class CommandOutputParameter> const &);
    MCAPI void forceOutput(std::string const &, std::vector<class CommandOutputParameter> const &);
    MCAPI class CommandPropertyBag const & getData() const;
    MCAPI std::vector<class CommandOutputMessage> const & getMessages() const;
    MCAPI int getSuccessCount() const;
    MCAPI enum CommandOutputType getType() const;
    MCAPI bool hasPlayerText() const;
    MCAPI void load(enum CommandOutputType, int, std::vector<class CommandOutputMessage> &&, std::unique_ptr<class CommandPropertyBag> &&);
    MCAPI void setHasPlayerText();
    MCAPI void success(std::string const &, std::vector<class CommandOutputParameter> const &);
    MCAPI void success();
    MCAPI bool wantsData() const;
    MCAPI ~CommandOutput();

protected:

private:
    MCAPI void addMessage(std::string const &, std::vector<class CommandOutputParameter> const &, enum CommandOutputMessageType);

};