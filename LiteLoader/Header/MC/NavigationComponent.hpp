// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class NavigationComponent {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_NAVIGATIONCOMPONENT
public:
    class NavigationComponent& operator=(class NavigationComponent const &) = delete;
    NavigationComponent(class NavigationComponent const &) = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_NAVIGATIONCOMPONENT
#endif
    MCAPI NavigationComponent(class NavigationComponent &&);
    MCAPI NavigationComponent();
    MCAPI std::unique_ptr<class Path> createPath(class Mob &, class Actor &);
    MCAPI std::unique_ptr<class Path> createPath(class Mob &, class Vec3 const &);
    MCAPI bool getAvoidDamageBlocks() const;
    MCAPI bool getAvoidPortals() const;
    MCAPI bool getAvoidSun() const;
    MCAPI bool getAvoidWater() const;
    MCAPI std::vector<class BlockDescriptor> const & getBlocksToAvoid() const;
    MCAPI bool getCanBreach() const;
    MCAPI bool getCanFloat() const;
    MCAPI bool getCanJump() const;
    MCAPI bool getCanOpenDoors() const;
    MCAPI bool getCanOpenIronDoors() const;
    MCAPI bool getCanPassDoors() const;
    MCAPI bool getCanPathOverLava() const;
    MCAPI bool getCanSink() const;
    MCAPI bool getCanWalkInLava() const;
    MCAPI float getEndPathRadiusSqr() const;
    MCAPI bool getHasDestination() const;
    MCAPI bool getHasEndPathRadius() const;
    MCAPI bool getIsAmphibious() const;
    MCAPI bool getIsFollowingRivers() const;
    MCAPI class Vec3 getLastStuckCheckPosition() const;
    MCAPI float getMaxDistance(class Actor const &) const;
    MCAPI class Path * getPath() const;
    MCAPI float getSpeed() const;
    MCAPI class Vec3 const & getTargetOffset() const;
    MCAPI float getTerminationThreshold() const;
    MCAPI int getTickTimeout() const;
    MCAPI void incrementTick();
    MCAPI void initMultiTypeNavigationComponent(class Mob &, class ActorDefinitionDescriptor &);
    MCAPI void initializeFromDefinition(class Mob &, struct NavigationDescription *);
    MCAPI bool isDone() const;
    MCAPI enum NodeType isFree(class Mob &, class BlockPos const &, class BlockPos const &, class BlockPos const &, enum CanJumpIntoNode);
    MCAPI bool isStuck(int) const;
    MCAPI bool moveTo(class Mob &, class Actor &, float);
    MCAPI bool moveTo(class Mob &, class Vec3 const &, float, class Vec3 const &);
    MCAPI bool moveTo(class Mob &, class Vec3 const &, float);
    MCAPI bool moveTo(class Mob &, std::unique_ptr<class Path>, float);
    MCAPI class NavigationComponent & operator=(class NavigationComponent &&);
    MCAPI void resetPath();
    MCAPI void setAvoidDamageBlocks(bool);
    MCAPI void setAvoidPortals(bool);
    MCAPI void setAvoidSun(bool);
    MCAPI void setAvoidWater(bool);
    MCAPI void setCanFloat(bool);
    MCAPI void setCanJump(bool);
    MCAPI void setCanOpenDoors(bool);
    MCAPI void setCanPassDoors(bool);
    MCAPI void setCanSink(bool);
    MCAPI void setEndPathRadius(float);
    MCAPI void setHasDestination(bool);
    MCAPI void setHasEndPathRadius(bool);
    MCAPI void setInternalType(std::unique_ptr<class PathNavigation>);
    MCAPI void setIsFollowingRivers(bool);
    MCAPI void setPath(std::unique_ptr<class Path>);
    MCAPI void setSpeed(float);
    MCAPI void setTargetOffset(class Vec3 const &);
    MCAPI void setTerminationThreshold(float);
    MCAPI void stop(class Mob &);
    MCAPI bool travel(class Mob &, float &, float &, float &);
    MCAPI void update(class Mob &);
    MCAPI void updateLastStuckCheck(class Mob const &);
    MCAPI ~NavigationComponent();

protected:

private:

};