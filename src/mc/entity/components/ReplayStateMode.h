#pragma once

#include "mc/_HeaderOutputPredefine.h"

/**
 * @enum ReplayStateMode
 * @brief 定义了重放/修正系统的几种工作模式。
 *
 * 这是一个强类型枚举 (enum class)，用于指定移动修正策略应如何运作。
 * 它的底层类型被指定为 uchar (unsigned char)，这是一种内存优化，
 * 确保该枚举值在内存中只占用一个字节。
 */
enum class ReplayStateMode : uchar {
    /**
     * @brief 关闭模式 (Off = 0)
     *
     * 在此模式下，整个重放/修正系统被完全禁用。
     * - 在客户端：不会进行任何客户端预测的修正，客户端的移动完全由其自身模拟决定（直到被服务器强制传送）。这可能导致与服务器状态严重不同步。
     * - 在服务器：可能不会对客户端的位置进行严格验证。
     */
    Off       = 0,

    /**
     * @brief 始终开启模式 (Always = 1)
     *
     * 在此模式下，系统始终处于激活状态。
     * 这通常意味着每一帧或每次收到网络包时，都会执行检查和修正的逻辑。
     * 这可能是默认的或用于调试的模式，确保系统总是在工作。
     */
    Always    = 1,

    /**
     * @brief 阈值模式 (Threshold = 2)
     *
     * 这是最常用、最智能的模式。
     * 在此模式下，系统是激活的，但它只在“必要时”才进行修正。
     * “必要时”的判断标准就是“阈值（Threshold）”。例如，只有当客户端预测的位置与服务器权威位置之间的距离超过了预设的阈值时，才会触发一次修正。
     * 这种模式在性能和准确性之间取得了很好的平衡，避免了因微小、无害的误差而进行不必要的修正。
     */
    Threshold = 2,
};