// 提示文件帮助 Visual Studio IDE 解释 Visual C++ 标识符,
// 如函数和宏的名称。
// 有关详细信息，请参见 https://go.microsoft.com/fwlink/?linkid=865984
#define __ctor(RefClass, NativeClass) RefClass(System::IntPtr p) : ClassTemplate(p) { } RefClass(System::IntPtr p, bool ownsNativeInstance) : ClassTemplate(p, ownsNativeInstance) { } RefClass(NativeClass* p) : ClassTemplate(p) { } RefClass(NativeClass* p, bool ownsNativeInstance) : ClassTemplate(p, ownsNativeInstance) { }
#define __ctor_all(RefClass, NativeClass) __ctor(RefClass, NativeClass); internal: __ctor_copy(RefClass, NativeClass); __ctor_move(RefClass, NativeClass); public:
#define __ctor_base(RefClass, NativeClass, BaseClass) RefClass(System::IntPtr p) : BaseClass(p) { } RefClass(System::IntPtr p, bool ownsNativeInstance) : BaseClass(p, ownsNativeInstance) { } RefClass(NativeClass* p) : BaseClass(p) { } RefClass(NativeClass* p, bool ownsNativeInstance) : BaseClass(p, ownsNativeInstance) { } property NativeClass* NativePtr { public: NativeClass* get() { return static_cast<NativeClass*>(BaseClass::NativePtr); } protected: void set(NativeClass* value) { BaseClass::NativePtr = value; } }
#define __ctor_copy(RefClass, NativeClass) RefClass(NativeClass& r) : ClassTemplate(r) { }
#define __ctor_move(RefClass, NativeClass) RefClass(NativeClass&& m) : ClassTemplate(m) { }
#define NativeCallbackConvertHelper(class_name, callback_delegate, ret, __VA_ARGS__) template <CHash, CHash> ref class NativeCallbackTemplate; template <> ref class NativeCallbackTemplate<do_hash(#class_name) ^ do_hash(#ret), do_hash(#callback_delegate) ^ do_hash(#__VA_ARGS__)> : public NativeCallbackHandler { public: typedef ret (*pCallback)(__VA_ARGS__); delegate ret delCallback(__VA_ARGS__); public: GCHandle gch; callback_delegate ^ delfunc; public: value class Pair { public: pCallback pCallbackFn; NativeCallbackTemplate ^ converter; Pair(pCallback p, NativeCallbackTemplate ^ obj) : pCallbackFn(p) , converter(obj) { } }; protected: NativeCallbackTemplate() : delfunc(nullptr) { } NativeCallbackTemplate(callback_delegate ^ callback) : delfunc(callback) { } ~NativeCallbackTemplate() { this->!NativeCallbackTemplate(); GC::SuppressFinalize(this); } !NativeCallbackTemplate() { if (gch.IsAllocated) gch.Free(); } private: ret NATIVECALLBACK NativeCallbackFunc(__VA_ARGS__); public: static Pair Create(callback_delegate ^ callback) { auto instance = gcnew NativeCallbackTemplate(callback); delCallback ^ del = gcnew delCallback(instance, &NativeCallbackFunc); instance->gch = GCHandle::Alloc(del); auto p = static_cast<pCallback>((void*)Marshal::GetFunctionPointerForDelegate(del)); return Pair(p, instance); } }; ref class class_name : public NativeCallbackTemplate<do_hash(#class_name) ^ do_hash(#ret), do_hash(#callback_delegate) ^ do_hash(#__VA_ARGS__)> { }; ret NativeCallbackTemplate<do_hash(#class_name) ^ do_hash(#ret), do_hash(#callback_delegate) ^ do_hash(#__VA_ARGS__)>::NativeCallbackFunc(__VA_ARGS__)
#define Property_String(nativeName, name) property System::String ^ name { inline System::String ^ get() { return marshalString<Encoding::E_UTF8>(_this->nativeName); } inline void set(System::String ^ arg) { _this->nativeName = marshalString<Encoding::E_UTF8>(arg); } }
#define Property_Ptr(Namespace, type, nativeName, name) property Namespace::type ^ name { inline Namespace::type ^ get() { return gcnew Namespace::type(_this->nativeName); } inline void set(Namespace::type ^ arg) { _this->nativeName = arg->NativePtr; } }
#define Property(type, nativeName, name) property type name { inline type get() { return _this->nativeName; } inline void set(type arg) { _this->nativeName = arg; } }
#define Property_Instance(Namespace, type, nativeName, name) property Namespace::type ^ name { inline Namespace::type ^ get() { return gcnew Namespace::type(_this->nativeName); } inline void set(Namespace::type ^ arg) { _this->nativeName = arg; } }
#define Property_Enum(type, nativeEnum, name) property type name { inline type get() { return ((type)(_this->m##name)); } inline void set(type arg) { _this->m##name = ((nativeEnum)(arg)); } }
